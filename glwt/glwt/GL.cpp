/** Auto generated by the gl3w_gen.py script **/
#include "GL.h"

#ifdef _WIN32
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>

static HMODULE libgl;

static void open_libgl(void)
{
	libgl = LoadLibraryA("opengl32.dll");
}

static void close_libgl(void)
{
	FreeLibrary(libgl);
}

static void *get_proc(const char *proc)
{
	void *res;

	res = wglGetProcAddress(proc);
	if (!res)
		res = GetProcAddress(libgl, proc);
	return res;
}
#elif defined(__APPLE__) || defined(__APPLE_CC__)
#include <Carbon/Carbon.h>

CFBundleRef bundle;
CFURLRef bundleURL;

static void open_libgl(void)
{
	bundleURL = CFURLCreateWithFileSystemPath(kCFAllocatorDefault,
		CFSTR("/System/Library/Frameworks/OpenGL.framework"),
		kCFURLPOSIXPathStyle, true);

	bundle = CFBundleCreate(kCFAllocatorDefault, bundleURL);
	assert(bundle != NULL);
}

static void close_libgl(void)
{
	CFRelease(bundle);
	CFRelease(bundleURL);
}

static void *get_proc(const char *proc)
{
	void *res;

	CFStringRef procname = CFStringCreateWithCString(kCFAllocatorDefault, proc,
		kCFStringEncodingASCII);
	res = CFBundleGetFunctionPointerForName(bundle, procname);
	CFRelease(procname);
	return res;
}
#else
#include <dlfcn.h>
#include <GL/glx.h>

static void *libgl;

static void open_libgl(void)
{
	libgl = dlopen("libGL.so.1", RTLD_LAZY | RTLD_GLOBAL);
}

static void close_libgl(void)
{
	dlclose(libgl);
}

static void *get_proc(const char *proc)
{
	void *res;

	res = glXGetProcAddress((const GLubyte *) proc);
	if (!res)
		res = dlsym(libgl, proc);
	return res;
}
#endif

Version version;

static int parse_version(void)
{
	if (!GL::GetIntegerv)
		return -1;

	GL::GetIntegerv(GL_MAJOR_VERSION, &version.major);
	GL::GetIntegerv(GL_MINOR_VERSION, &version.minor);

	if (version.major < 3)
		return -1;
	return 0;
}

static void load_procs(void);

int GL::Init(void)
{
	open_libgl();
	load_procs();
	close_libgl();
	return parse_version();
}

int GL::IsSupported(int major, int minor)
{
	if (major < 3)
		return 0;
	if (version.major == major)
		return version.minor >= minor;
	return version.major >= major;
}

const Version& GL::GetVersion()
{
	return version;
}

void *GL::GetProcAddress(const char *proc)
{
	return get_proc(proc);
}

PFNGLCULLFACEPROC mCullFace;
PFNGLFRONTFACEPROC mFrontFace;
PFNGLHINTPROC mHint;
PFNGLLINEWIDTHPROC mLineWidth;
PFNGLPOINTSIZEPROC mPointSize;
PFNGLPOLYGONMODEPROC mPolygonMode;
PFNGLSCISSORPROC mScissor;
PFNGLTEXPARAMETERFPROC mTexParameterf;
PFNGLTEXPARAMETERFVPROC mTexParameterfv;
PFNGLTEXPARAMETERIPROC mTexParameteri;
PFNGLTEXPARAMETERIVPROC mTexParameteriv;
PFNGLTEXIMAGE1DPROC mTexImage1D;
PFNGLTEXIMAGE2DPROC mTexImage2D;
PFNGLDRAWBUFFERPROC mDrawBuffer;
PFNGLCLEARPROC mClear;
PFNGLCLEARCOLORPROC mClearColor;
PFNGLCLEARSTENCILPROC mClearStencil;
PFNGLCLEARDEPTHPROC mClearDepth;
PFNGLSTENCILMASKPROC mStencilMask;
PFNGLCOLORMASKPROC mColorMask;
PFNGLDEPTHMASKPROC mDepthMask;
PFNGLDISABLEPROC mDisable;
PFNGLENABLEPROC mEnable;
PFNGLFINISHPROC mFinish;
PFNGLFLUSHPROC mFlush;
PFNGLBLENDFUNCPROC mBlendFunc;
PFNGLLOGICOPPROC mLogicOp;
PFNGLSTENCILFUNCPROC mStencilFunc;
PFNGLSTENCILOPPROC mStencilOp;
PFNGLDEPTHFUNCPROC mDepthFunc;
PFNGLPIXELSTOREFPROC mPixelStoref;
PFNGLPIXELSTOREIPROC mPixelStorei;
PFNGLREADBUFFERPROC mReadBuffer;
PFNGLREADPIXELSPROC mReadPixels;
PFNGLGETBOOLEANVPROC mGetBooleanv;
PFNGLGETDOUBLEVPROC mGetDoublev;
PFNGLGETERRORPROC mGetError;
PFNGLGETFLOATVPROC mGetFloatv;
PFNGLGETINTEGERVPROC mGetIntegerv;
PFNGLGETSTRINGPROC mGetString;
PFNGLGETTEXIMAGEPROC mGetTexImage;
PFNGLGETTEXPARAMETERFVPROC mGetTexParameterfv;
PFNGLGETTEXPARAMETERIVPROC mGetTexParameteriv;
PFNGLGETTEXLEVELPARAMETERFVPROC mGetTexLevelParameterfv;
PFNGLGETTEXLEVELPARAMETERIVPROC mGetTexLevelParameteriv;
PFNGLISENABLEDPROC mIsEnabled;
PFNGLDEPTHRANGEPROC mDepthRange;
PFNGLVIEWPORTPROC mViewport;
PFNGLDRAWARRAYSPROC mDrawArrays;
PFNGLDRAWELEMENTSPROC mDrawElements;
PFNGLGETPOINTERVPROC mGetPointerv;
PFNGLPOLYGONOFFSETPROC mPolygonOffset;
PFNGLCOPYTEXIMAGE1DPROC mCopyTexImage1D;
PFNGLCOPYTEXIMAGE2DPROC mCopyTexImage2D;
PFNGLCOPYTEXSUBIMAGE1DPROC mCopyTexSubImage1D;
PFNGLCOPYTEXSUBIMAGE2DPROC mCopyTexSubImage2D;
PFNGLTEXSUBIMAGE1DPROC mTexSubImage1D;
PFNGLTEXSUBIMAGE2DPROC mTexSubImage2D;
PFNGLBINDTEXTUREPROC mBindTexture;
PFNGLDELETETEXTURESPROC mDeleteTextures;
PFNGLGENTEXTURESPROC mGenTextures;
PFNGLISTEXTUREPROC mIsTexture;
PFNGLBLENDCOLORPROC mBlendColor;
PFNGLBLENDEQUATIONPROC mBlendEquation;
PFNGLDRAWRANGEELEMENTSPROC mDrawRangeElements;
PFNGLTEXIMAGE3DPROC mTexImage3D;
PFNGLTEXSUBIMAGE3DPROC mTexSubImage3D;
PFNGLCOPYTEXSUBIMAGE3DPROC mCopyTexSubImage3D;
PFNGLACTIVETEXTUREPROC mActiveTexture;
PFNGLSAMPLECOVERAGEPROC mSampleCoverage;
PFNGLCOMPRESSEDTEXIMAGE3DPROC mCompressedTexImage3D;
PFNGLCOMPRESSEDTEXIMAGE2DPROC mCompressedTexImage2D;
PFNGLCOMPRESSEDTEXIMAGE1DPROC mCompressedTexImage1D;
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC mCompressedTexSubImage3D;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC mCompressedTexSubImage2D;
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC mCompressedTexSubImage1D;
PFNGLGETCOMPRESSEDTEXIMAGEPROC mGetCompressedTexImage;
PFNGLBLENDFUNCSEPARATEPROC mBlendFuncSeparate;
PFNGLMULTIDRAWARRAYSPROC mMultiDrawArrays;
PFNGLMULTIDRAWELEMENTSPROC mMultiDrawElements;
PFNGLPOINTPARAMETERFPROC mPointParameterf;
PFNGLPOINTPARAMETERFVPROC mPointParameterfv;
PFNGLPOINTPARAMETERIPROC mPointParameteri;
PFNGLPOINTPARAMETERIVPROC mPointParameteriv;
PFNGLGENQUERIESPROC mGenQueries;
PFNGLDELETEQUERIESPROC mDeleteQueries;
PFNGLISQUERYPROC mIsQuery;
PFNGLBEGINQUERYPROC mBeginQuery;
PFNGLENDQUERYPROC mEndQuery;
PFNGLGETQUERYIVPROC mGetQueryiv;
PFNGLGETQUERYOBJECTIVPROC mGetQueryObjectiv;
PFNGLGETQUERYOBJECTUIVPROC mGetQueryObjectuiv;
PFNGLBINDBUFFERPROC mBindBuffer;
PFNGLDELETEBUFFERSPROC mDeleteBuffers;
PFNGLGENBUFFERSPROC mGenBuffers;
PFNGLISBUFFERPROC mIsBuffer;
PFNGLBUFFERDATAPROC mBufferData;
PFNGLBUFFERSUBDATAPROC mBufferSubData;
PFNGLGETBUFFERSUBDATAPROC mGetBufferSubData;
PFNGLMAPBUFFERPROC mMapBuffer;
PFNGLUNMAPBUFFERPROC mUnmapBuffer;
PFNGLGETBUFFERPARAMETERIVPROC mGetBufferParameteriv;
PFNGLGETBUFFERPOINTERVPROC mGetBufferPointerv;
PFNGLBLENDEQUATIONSEPARATEPROC mBlendEquationSeparate;
PFNGLDRAWBUFFERSPROC mDrawBuffers;
PFNGLSTENCILOPSEPARATEPROC mStencilOpSeparate;
PFNGLSTENCILFUNCSEPARATEPROC mStencilFuncSeparate;
PFNGLSTENCILMASKSEPARATEPROC mStencilMaskSeparate;
PFNGLATTACHSHADERPROC mAttachShader;
PFNGLBINDATTRIBLOCATIONPROC mBindAttribLocation;
PFNGLCOMPILESHADERPROC mCompileShader;
PFNGLCREATEPROGRAMPROC mCreateProgram;
PFNGLCREATESHADERPROC mCreateShader;
PFNGLDELETEPROGRAMPROC mDeleteProgram;
PFNGLDELETESHADERPROC mDeleteShader;
PFNGLDETACHSHADERPROC mDetachShader;
PFNGLDISABLEVERTEXATTRIBARRAYPROC mDisableVertexAttribArray;
PFNGLENABLEVERTEXATTRIBARRAYPROC mEnableVertexAttribArray;
PFNGLGETACTIVEATTRIBPROC mGetActiveAttrib;
PFNGLGETACTIVEUNIFORMPROC mGetActiveUniform;
PFNGLGETATTACHEDSHADERSPROC mGetAttachedShaders;
PFNGLGETATTRIBLOCATIONPROC mGetAttribLocation;
PFNGLGETPROGRAMIVPROC mGetProgramiv;
PFNGLGETPROGRAMINFOLOGPROC mGetProgramInfoLog;
PFNGLGETSHADERIVPROC mGetShaderiv;
PFNGLGETSHADERINFOLOGPROC mGetShaderInfoLog;
PFNGLGETSHADERSOURCEPROC mGetShaderSource;
PFNGLGETUNIFORMLOCATIONPROC mGetUniformLocation;
PFNGLGETUNIFORMFVPROC mGetUniformfv;
PFNGLGETUNIFORMIVPROC mGetUniformiv;
PFNGLGETVERTEXATTRIBDVPROC mGetVertexAttribdv;
PFNGLGETVERTEXATTRIBFVPROC mGetVertexAttribfv;
PFNGLGETVERTEXATTRIBIVPROC mGetVertexAttribiv;
PFNGLGETVERTEXATTRIBPOINTERVPROC mGetVertexAttribPointerv;
PFNGLISPROGRAMPROC mIsProgram;
PFNGLISSHADERPROC mIsShader;
PFNGLLINKPROGRAMPROC mLinkProgram;
PFNGLSHADERSOURCEPROC mShaderSource;
PFNGLUSEPROGRAMPROC mUseProgram;
PFNGLUNIFORM1FPROC mUniform1f;
PFNGLUNIFORM2FPROC mUniform2f;
PFNGLUNIFORM3FPROC mUniform3f;
PFNGLUNIFORM4FPROC mUniform4f;
PFNGLUNIFORM1IPROC mUniform1i;
PFNGLUNIFORM2IPROC mUniform2i;
PFNGLUNIFORM3IPROC mUniform3i;
PFNGLUNIFORM4IPROC mUniform4i;
PFNGLUNIFORM1FVPROC mUniform1fv;
PFNGLUNIFORM2FVPROC mUniform2fv;
PFNGLUNIFORM3FVPROC mUniform3fv;
PFNGLUNIFORM4FVPROC mUniform4fv;
PFNGLUNIFORM1IVPROC mUniform1iv;
PFNGLUNIFORM2IVPROC mUniform2iv;
PFNGLUNIFORM3IVPROC mUniform3iv;
PFNGLUNIFORM4IVPROC mUniform4iv;
PFNGLUNIFORMMATRIX2FVPROC mUniformMatrix2fv;
PFNGLUNIFORMMATRIX3FVPROC mUniformMatrix3fv;
PFNGLUNIFORMMATRIX4FVPROC mUniformMatrix4fv;
PFNGLVALIDATEPROGRAMPROC mValidateProgram;
PFNGLVERTEXATTRIB1DPROC mVertexAttrib1d;
PFNGLVERTEXATTRIB1DVPROC mVertexAttrib1dv;
PFNGLVERTEXATTRIB1FPROC mVertexAttrib1f;
PFNGLVERTEXATTRIB1FVPROC mVertexAttrib1fv;
PFNGLVERTEXATTRIB1SPROC mVertexAttrib1s;
PFNGLVERTEXATTRIB1SVPROC mVertexAttrib1sv;
PFNGLVERTEXATTRIB2DPROC mVertexAttrib2d;
PFNGLVERTEXATTRIB2DVPROC mVertexAttrib2dv;
PFNGLVERTEXATTRIB2FPROC mVertexAttrib2f;
PFNGLVERTEXATTRIB2FVPROC mVertexAttrib2fv;
PFNGLVERTEXATTRIB2SPROC mVertexAttrib2s;
PFNGLVERTEXATTRIB2SVPROC mVertexAttrib2sv;
PFNGLVERTEXATTRIB3DPROC mVertexAttrib3d;
PFNGLVERTEXATTRIB3DVPROC mVertexAttrib3dv;
PFNGLVERTEXATTRIB3FPROC mVertexAttrib3f;
PFNGLVERTEXATTRIB3FVPROC mVertexAttrib3fv;
PFNGLVERTEXATTRIB3SPROC mVertexAttrib3s;
PFNGLVERTEXATTRIB3SVPROC mVertexAttrib3sv;
PFNGLVERTEXATTRIB4NBVPROC mVertexAttrib4Nbv;
PFNGLVERTEXATTRIB4NIVPROC mVertexAttrib4Niv;
PFNGLVERTEXATTRIB4NSVPROC mVertexAttrib4Nsv;
PFNGLVERTEXATTRIB4NUBPROC mVertexAttrib4Nub;
PFNGLVERTEXATTRIB4NUBVPROC mVertexAttrib4Nubv;
PFNGLVERTEXATTRIB4NUIVPROC mVertexAttrib4Nuiv;
PFNGLVERTEXATTRIB4NUSVPROC mVertexAttrib4Nusv;
PFNGLVERTEXATTRIB4BVPROC mVertexAttrib4bv;
PFNGLVERTEXATTRIB4DPROC mVertexAttrib4d;
PFNGLVERTEXATTRIB4DVPROC mVertexAttrib4dv;
PFNGLVERTEXATTRIB4FPROC mVertexAttrib4f;
PFNGLVERTEXATTRIB4FVPROC mVertexAttrib4fv;
PFNGLVERTEXATTRIB4IVPROC mVertexAttrib4iv;
PFNGLVERTEXATTRIB4SPROC mVertexAttrib4s;
PFNGLVERTEXATTRIB4SVPROC mVertexAttrib4sv;
PFNGLVERTEXATTRIB4UBVPROC mVertexAttrib4ubv;
PFNGLVERTEXATTRIB4UIVPROC mVertexAttrib4uiv;
PFNGLVERTEXATTRIB4USVPROC mVertexAttrib4usv;
PFNGLVERTEXATTRIBPOINTERPROC mVertexAttribPointer;
PFNGLUNIFORMMATRIX2X3FVPROC mUniformMatrix2x3fv;
PFNGLUNIFORMMATRIX3X2FVPROC mUniformMatrix3x2fv;
PFNGLUNIFORMMATRIX2X4FVPROC mUniformMatrix2x4fv;
PFNGLUNIFORMMATRIX4X2FVPROC mUniformMatrix4x2fv;
PFNGLUNIFORMMATRIX3X4FVPROC mUniformMatrix3x4fv;
PFNGLUNIFORMMATRIX4X3FVPROC mUniformMatrix4x3fv;
PFNGLCOLORMASKIPROC mColorMaski;
PFNGLGETBOOLEANI_VPROC mGetBooleani_v;
PFNGLGETINTEGERI_VPROC mGetIntegeri_v;
PFNGLENABLEIPROC mEnablei;
PFNGLDISABLEIPROC mDisablei;
PFNGLISENABLEDIPROC mIsEnabledi;
PFNGLBEGINTRANSFORMFEEDBACKPROC mBeginTransformFeedback;
PFNGLENDTRANSFORMFEEDBACKPROC mEndTransformFeedback;
PFNGLBINDBUFFERRANGEPROC mBindBufferRange;
PFNGLBINDBUFFERBASEPROC mBindBufferBase;
PFNGLTRANSFORMFEEDBACKVARYINGSPROC mTransformFeedbackVaryings;
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC mGetTransformFeedbackVarying;
PFNGLCLAMPCOLORPROC mClampColor;
PFNGLBEGINCONDITIONALRENDERPROC mBeginConditionalRender;
PFNGLENDCONDITIONALRENDERPROC mEndConditionalRender;
PFNGLVERTEXATTRIBIPOINTERPROC mVertexAttribIPointer;
PFNGLGETVERTEXATTRIBIIVPROC mGetVertexAttribIiv;
PFNGLGETVERTEXATTRIBIUIVPROC mGetVertexAttribIuiv;
PFNGLVERTEXATTRIBI1IPROC mVertexAttribI1i;
PFNGLVERTEXATTRIBI2IPROC mVertexAttribI2i;
PFNGLVERTEXATTRIBI3IPROC mVertexAttribI3i;
PFNGLVERTEXATTRIBI4IPROC mVertexAttribI4i;
PFNGLVERTEXATTRIBI1UIPROC mVertexAttribI1ui;
PFNGLVERTEXATTRIBI2UIPROC mVertexAttribI2ui;
PFNGLVERTEXATTRIBI3UIPROC mVertexAttribI3ui;
PFNGLVERTEXATTRIBI4UIPROC mVertexAttribI4ui;
PFNGLVERTEXATTRIBI1IVPROC mVertexAttribI1iv;
PFNGLVERTEXATTRIBI2IVPROC mVertexAttribI2iv;
PFNGLVERTEXATTRIBI3IVPROC mVertexAttribI3iv;
PFNGLVERTEXATTRIBI4IVPROC mVertexAttribI4iv;
PFNGLVERTEXATTRIBI1UIVPROC mVertexAttribI1uiv;
PFNGLVERTEXATTRIBI2UIVPROC mVertexAttribI2uiv;
PFNGLVERTEXATTRIBI3UIVPROC mVertexAttribI3uiv;
PFNGLVERTEXATTRIBI4UIVPROC mVertexAttribI4uiv;
PFNGLVERTEXATTRIBI4BVPROC mVertexAttribI4bv;
PFNGLVERTEXATTRIBI4SVPROC mVertexAttribI4sv;
PFNGLVERTEXATTRIBI4UBVPROC mVertexAttribI4ubv;
PFNGLVERTEXATTRIBI4USVPROC mVertexAttribI4usv;
PFNGLGETUNIFORMUIVPROC mGetUniformuiv;
PFNGLBINDFRAGDATALOCATIONPROC mBindFragDataLocation;
PFNGLGETFRAGDATALOCATIONPROC mGetFragDataLocation;
PFNGLUNIFORM1UIPROC mUniform1ui;
PFNGLUNIFORM2UIPROC mUniform2ui;
PFNGLUNIFORM3UIPROC mUniform3ui;
PFNGLUNIFORM4UIPROC mUniform4ui;
PFNGLUNIFORM1UIVPROC mUniform1uiv;
PFNGLUNIFORM2UIVPROC mUniform2uiv;
PFNGLUNIFORM3UIVPROC mUniform3uiv;
PFNGLUNIFORM4UIVPROC mUniform4uiv;
PFNGLTEXPARAMETERIIVPROC mTexParameterIiv;
PFNGLTEXPARAMETERIUIVPROC mTexParameterIuiv;
PFNGLGETTEXPARAMETERIIVPROC mGetTexParameterIiv;
PFNGLGETTEXPARAMETERIUIVPROC mGetTexParameterIuiv;
PFNGLCLEARBUFFERIVPROC mClearBufferiv;
PFNGLCLEARBUFFERUIVPROC mClearBufferuiv;
PFNGLCLEARBUFFERFVPROC mClearBufferfv;
PFNGLCLEARBUFFERFIPROC mClearBufferfi;
PFNGLGETSTRINGIPROC mGetStringi;
PFNGLDRAWARRAYSINSTANCEDPROC mDrawArraysInstanced;
PFNGLDRAWELEMENTSINSTANCEDPROC mDrawElementsInstanced;
PFNGLTEXBUFFERPROC mTexBuffer;
PFNGLPRIMITIVERESTARTINDEXPROC mPrimitiveRestartIndex;
PFNGLGETINTEGER64I_VPROC mGetInteger64i_v;
PFNGLGETBUFFERPARAMETERI64VPROC mGetBufferParameteri64v;
PFNGLFRAMEBUFFERTEXTUREPROC mFramebufferTexture;
PFNGLVERTEXATTRIBDIVISORPROC mVertexAttribDivisor;
PFNGLMINSAMPLESHADINGPROC mMinSampleShading;
PFNGLBLENDEQUATIONIPROC mBlendEquationi;
PFNGLBLENDEQUATIONSEPARATEIPROC mBlendEquationSeparatei;
PFNGLBLENDFUNCIPROC mBlendFunci;
PFNGLBLENDFUNCSEPARATEIPROC mBlendFuncSeparatei;
PFNGLISRENDERBUFFERPROC mIsRenderbuffer;
PFNGLBINDRENDERBUFFERPROC mBindRenderbuffer;
PFNGLDELETERENDERBUFFERSPROC mDeleteRenderbuffers;
PFNGLGENRENDERBUFFERSPROC mGenRenderbuffers;
PFNGLRENDERBUFFERSTORAGEPROC mRenderbufferStorage;
PFNGLGETRENDERBUFFERPARAMETERIVPROC mGetRenderbufferParameteriv;
PFNGLISFRAMEBUFFERPROC mIsFramebuffer;
PFNGLBINDFRAMEBUFFERPROC mBindFramebuffer;
PFNGLDELETEFRAMEBUFFERSPROC mDeleteFramebuffers;
PFNGLGENFRAMEBUFFERSPROC mGenFramebuffers;
PFNGLCHECKFRAMEBUFFERSTATUSPROC mCheckFramebufferStatus;
PFNGLFRAMEBUFFERTEXTURE1DPROC mFramebufferTexture1D;
PFNGLFRAMEBUFFERTEXTURE2DPROC mFramebufferTexture2D;
PFNGLFRAMEBUFFERTEXTURE3DPROC mFramebufferTexture3D;
PFNGLFRAMEBUFFERRENDERBUFFERPROC mFramebufferRenderbuffer;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC mGetFramebufferAttachmentParameteriv;
PFNGLGENERATEMIPMAPPROC mGenerateMipmap;
PFNGLBLITFRAMEBUFFERPROC mBlitFramebuffer;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC mRenderbufferStorageMultisample;
PFNGLFRAMEBUFFERTEXTURELAYERPROC mFramebufferTextureLayer;
PFNGLMAPBUFFERRANGEPROC mMapBufferRange;
PFNGLFLUSHMAPPEDBUFFERRANGEPROC mFlushMappedBufferRange;
PFNGLBINDVERTEXARRAYPROC mBindVertexArray;
PFNGLDELETEVERTEXARRAYSPROC mDeleteVertexArrays;
PFNGLGENVERTEXARRAYSPROC mGenVertexArrays;
PFNGLISVERTEXARRAYPROC mIsVertexArray;
PFNGLGETUNIFORMINDICESPROC mGetUniformIndices;
PFNGLGETACTIVEUNIFORMSIVPROC mGetActiveUniformsiv;
PFNGLGETACTIVEUNIFORMNAMEPROC mGetActiveUniformName;
PFNGLGETUNIFORMBLOCKINDEXPROC mGetUniformBlockIndex;
PFNGLGETACTIVEUNIFORMBLOCKIVPROC mGetActiveUniformBlockiv;
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC mGetActiveUniformBlockName;
PFNGLUNIFORMBLOCKBINDINGPROC mUniformBlockBinding;
PFNGLCOPYBUFFERSUBDATAPROC mCopyBufferSubData;
PFNGLDRAWELEMENTSBASEVERTEXPROC mDrawElementsBaseVertex;
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC mDrawRangeElementsBaseVertex;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC mDrawElementsInstancedBaseVertex;
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC mMultiDrawElementsBaseVertex;
PFNGLPROVOKINGVERTEXPROC mProvokingVertex;
PFNGLFENCESYNCPROC mFenceSync;
PFNGLISSYNCPROC mIsSync;
PFNGLDELETESYNCPROC mDeleteSync;
PFNGLCLIENTWAITSYNCPROC mClientWaitSync;
PFNGLWAITSYNCPROC mWaitSync;
PFNGLGETINTEGER64VPROC mGetInteger64v;
PFNGLGETSYNCIVPROC mGetSynciv;
PFNGLTEXIMAGE2DMULTISAMPLEPROC mTexImage2DMultisample;
PFNGLTEXIMAGE3DMULTISAMPLEPROC mTexImage3DMultisample;
PFNGLGETMULTISAMPLEFVPROC mGetMultisamplefv;
PFNGLSAMPLEMASKIPROC mSampleMaski;
PFNGLBLENDEQUATIONIARBPROC mBlendEquationiARB;
PFNGLBLENDEQUATIONSEPARATEIARBPROC mBlendEquationSeparateiARB;
PFNGLBLENDFUNCIARBPROC mBlendFunciARB;
PFNGLBLENDFUNCSEPARATEIARBPROC mBlendFuncSeparateiARB;
PFNGLMINSAMPLESHADINGARBPROC mMinSampleShadingARB;
PFNGLNAMEDSTRINGARBPROC mNamedStringARB;
PFNGLDELETENAMEDSTRINGARBPROC mDeleteNamedStringARB;
PFNGLCOMPILESHADERINCLUDEARBPROC mCompileShaderIncludeARB;
PFNGLISNAMEDSTRINGARBPROC mIsNamedStringARB;
PFNGLGETNAMEDSTRINGARBPROC mGetNamedStringARB;
PFNGLGETNAMEDSTRINGIVARBPROC mGetNamedStringivARB;
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC mBindFragDataLocationIndexed;
PFNGLGETFRAGDATAINDEXPROC mGetFragDataIndex;
PFNGLGENSAMPLERSPROC mGenSamplers;
PFNGLDELETESAMPLERSPROC mDeleteSamplers;
PFNGLISSAMPLERPROC mIsSampler;
PFNGLBINDSAMPLERPROC mBindSampler;
PFNGLSAMPLERPARAMETERIPROC mSamplerParameteri;
PFNGLSAMPLERPARAMETERIVPROC mSamplerParameteriv;
PFNGLSAMPLERPARAMETERFPROC mSamplerParameterf;
PFNGLSAMPLERPARAMETERFVPROC mSamplerParameterfv;
PFNGLSAMPLERPARAMETERIIVPROC mSamplerParameterIiv;
PFNGLSAMPLERPARAMETERIUIVPROC mSamplerParameterIuiv;
PFNGLGETSAMPLERPARAMETERIVPROC mGetSamplerParameteriv;
PFNGLGETSAMPLERPARAMETERIIVPROC mGetSamplerParameterIiv;
PFNGLGETSAMPLERPARAMETERFVPROC mGetSamplerParameterfv;
PFNGLGETSAMPLERPARAMETERIUIVPROC mGetSamplerParameterIuiv;
PFNGLQUERYCOUNTERPROC mQueryCounter;
PFNGLGETQUERYOBJECTI64VPROC mGetQueryObjecti64v;
PFNGLGETQUERYOBJECTUI64VPROC mGetQueryObjectui64v;
PFNGLVERTEXP2UIPROC mVertexP2ui;
PFNGLVERTEXP2UIVPROC mVertexP2uiv;
PFNGLVERTEXP3UIPROC mVertexP3ui;
PFNGLVERTEXP3UIVPROC mVertexP3uiv;
PFNGLVERTEXP4UIPROC mVertexP4ui;
PFNGLVERTEXP4UIVPROC mVertexP4uiv;
PFNGLTEXCOORDP1UIPROC mTexCoordP1ui;
PFNGLTEXCOORDP1UIVPROC mTexCoordP1uiv;
PFNGLTEXCOORDP2UIPROC mTexCoordP2ui;
PFNGLTEXCOORDP2UIVPROC mTexCoordP2uiv;
PFNGLTEXCOORDP3UIPROC mTexCoordP3ui;
PFNGLTEXCOORDP3UIVPROC mTexCoordP3uiv;
PFNGLTEXCOORDP4UIPROC mTexCoordP4ui;
PFNGLTEXCOORDP4UIVPROC mTexCoordP4uiv;
PFNGLMULTITEXCOORDP1UIPROC mMultiTexCoordP1ui;
PFNGLMULTITEXCOORDP1UIVPROC mMultiTexCoordP1uiv;
PFNGLMULTITEXCOORDP2UIPROC mMultiTexCoordP2ui;
PFNGLMULTITEXCOORDP2UIVPROC mMultiTexCoordP2uiv;
PFNGLMULTITEXCOORDP3UIPROC mMultiTexCoordP3ui;
PFNGLMULTITEXCOORDP3UIVPROC mMultiTexCoordP3uiv;
PFNGLMULTITEXCOORDP4UIPROC mMultiTexCoordP4ui;
PFNGLMULTITEXCOORDP4UIVPROC mMultiTexCoordP4uiv;
PFNGLNORMALP3UIPROC mNormalP3ui;
PFNGLNORMALP3UIVPROC mNormalP3uiv;
PFNGLCOLORP3UIPROC mColorP3ui;
PFNGLCOLORP3UIVPROC mColorP3uiv;
PFNGLCOLORP4UIPROC mColorP4ui;
PFNGLCOLORP4UIVPROC mColorP4uiv;
PFNGLSECONDARYCOLORP3UIPROC mSecondaryColorP3ui;
PFNGLSECONDARYCOLORP3UIVPROC mSecondaryColorP3uiv;
PFNGLVERTEXATTRIBP1UIPROC mVertexAttribP1ui;
PFNGLVERTEXATTRIBP1UIVPROC mVertexAttribP1uiv;
PFNGLVERTEXATTRIBP2UIPROC mVertexAttribP2ui;
PFNGLVERTEXATTRIBP2UIVPROC mVertexAttribP2uiv;
PFNGLVERTEXATTRIBP3UIPROC mVertexAttribP3ui;
PFNGLVERTEXATTRIBP3UIVPROC mVertexAttribP3uiv;
PFNGLVERTEXATTRIBP4UIPROC mVertexAttribP4ui;
PFNGLVERTEXATTRIBP4UIVPROC mVertexAttribP4uiv;
PFNGLDRAWARRAYSINDIRECTPROC mDrawArraysIndirect;
PFNGLDRAWELEMENTSINDIRECTPROC mDrawElementsIndirect;
PFNGLUNIFORM1DPROC mUniform1d;
PFNGLUNIFORM2DPROC mUniform2d;
PFNGLUNIFORM3DPROC mUniform3d;
PFNGLUNIFORM4DPROC mUniform4d;
PFNGLUNIFORM1DVPROC mUniform1dv;
PFNGLUNIFORM2DVPROC mUniform2dv;
PFNGLUNIFORM3DVPROC mUniform3dv;
PFNGLUNIFORM4DVPROC mUniform4dv;
PFNGLUNIFORMMATRIX2DVPROC mUniformMatrix2dv;
PFNGLUNIFORMMATRIX3DVPROC mUniformMatrix3dv;
PFNGLUNIFORMMATRIX4DVPROC mUniformMatrix4dv;
PFNGLUNIFORMMATRIX2X3DVPROC mUniformMatrix2x3dv;
PFNGLUNIFORMMATRIX2X4DVPROC mUniformMatrix2x4dv;
PFNGLUNIFORMMATRIX3X2DVPROC mUniformMatrix3x2dv;
PFNGLUNIFORMMATRIX3X4DVPROC mUniformMatrix3x4dv;
PFNGLUNIFORMMATRIX4X2DVPROC mUniformMatrix4x2dv;
PFNGLUNIFORMMATRIX4X3DVPROC mUniformMatrix4x3dv;
PFNGLGETUNIFORMDVPROC mGetUniformdv;
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC mGetSubroutineUniformLocation;
PFNGLGETSUBROUTINEINDEXPROC mGetSubroutineIndex;
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC mGetActiveSubroutineUniformiv;
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC mGetActiveSubroutineUniformName;
PFNGLGETACTIVESUBROUTINENAMEPROC mGetActiveSubroutineName;
PFNGLUNIFORMSUBROUTINESUIVPROC mUniformSubroutinesuiv;
PFNGLGETUNIFORMSUBROUTINEUIVPROC mGetUniformSubroutineuiv;
PFNGLGETPROGRAMSTAGEIVPROC mGetProgramStageiv;
PFNGLPATCHPARAMETERIPROC mPatchParameteri;
PFNGLPATCHPARAMETERFVPROC mPatchParameterfv;
PFNGLBINDTRANSFORMFEEDBACKPROC mBindTransformFeedback;
PFNGLDELETETRANSFORMFEEDBACKSPROC mDeleteTransformFeedbacks;
PFNGLGENTRANSFORMFEEDBACKSPROC mGenTransformFeedbacks;
PFNGLISTRANSFORMFEEDBACKPROC mIsTransformFeedback;
PFNGLPAUSETRANSFORMFEEDBACKPROC mPauseTransformFeedback;
PFNGLRESUMETRANSFORMFEEDBACKPROC mResumeTransformFeedback;
PFNGLDRAWTRANSFORMFEEDBACKPROC mDrawTransformFeedback;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC mDrawTransformFeedbackStream;
PFNGLBEGINQUERYINDEXEDPROC mBeginQueryIndexed;
PFNGLENDQUERYINDEXEDPROC mEndQueryIndexed;
PFNGLGETQUERYINDEXEDIVPROC mGetQueryIndexediv;
PFNGLRELEASESHADERCOMPILERPROC mReleaseShaderCompiler;
PFNGLSHADERBINARYPROC mShaderBinary;
PFNGLGETSHADERPRECISIONFORMATPROC mGetShaderPrecisionFormat;
PFNGLDEPTHRANGEFPROC mDepthRangef;
PFNGLCLEARDEPTHFPROC mClearDepthf;
PFNGLGETPROGRAMBINARYPROC mGetProgramBinary;
PFNGLPROGRAMBINARYPROC mProgramBinary;
PFNGLPROGRAMPARAMETERIPROC mProgramParameteri;
PFNGLUSEPROGRAMSTAGESPROC mUseProgramStages;
PFNGLACTIVESHADERPROGRAMPROC mActiveShaderProgram;
PFNGLCREATESHADERPROGRAMVPROC mCreateShaderProgramv;
PFNGLBINDPROGRAMPIPELINEPROC mBindProgramPipeline;
PFNGLDELETEPROGRAMPIPELINESPROC mDeleteProgramPipelines;
PFNGLGENPROGRAMPIPELINESPROC mGenProgramPipelines;
PFNGLISPROGRAMPIPELINEPROC mIsProgramPipeline;
PFNGLGETPROGRAMPIPELINEIVPROC mGetProgramPipelineiv;
PFNGLPROGRAMUNIFORM1IPROC mProgramUniform1i;
PFNGLPROGRAMUNIFORM1IVPROC mProgramUniform1iv;
PFNGLPROGRAMUNIFORM1FPROC mProgramUniform1f;
PFNGLPROGRAMUNIFORM1FVPROC mProgramUniform1fv;
PFNGLPROGRAMUNIFORM1DPROC mProgramUniform1d;
PFNGLPROGRAMUNIFORM1DVPROC mProgramUniform1dv;
PFNGLPROGRAMUNIFORM1UIPROC mProgramUniform1ui;
PFNGLPROGRAMUNIFORM1UIVPROC mProgramUniform1uiv;
PFNGLPROGRAMUNIFORM2IPROC mProgramUniform2i;
PFNGLPROGRAMUNIFORM2IVPROC mProgramUniform2iv;
PFNGLPROGRAMUNIFORM2FPROC mProgramUniform2f;
PFNGLPROGRAMUNIFORM2FVPROC mProgramUniform2fv;
PFNGLPROGRAMUNIFORM2DPROC mProgramUniform2d;
PFNGLPROGRAMUNIFORM2DVPROC mProgramUniform2dv;
PFNGLPROGRAMUNIFORM2UIPROC mProgramUniform2ui;
PFNGLPROGRAMUNIFORM2UIVPROC mProgramUniform2uiv;
PFNGLPROGRAMUNIFORM3IPROC mProgramUniform3i;
PFNGLPROGRAMUNIFORM3IVPROC mProgramUniform3iv;
PFNGLPROGRAMUNIFORM3FPROC mProgramUniform3f;
PFNGLPROGRAMUNIFORM3FVPROC mProgramUniform3fv;
PFNGLPROGRAMUNIFORM3DPROC mProgramUniform3d;
PFNGLPROGRAMUNIFORM3DVPROC mProgramUniform3dv;
PFNGLPROGRAMUNIFORM3UIPROC mProgramUniform3ui;
PFNGLPROGRAMUNIFORM3UIVPROC mProgramUniform3uiv;
PFNGLPROGRAMUNIFORM4IPROC mProgramUniform4i;
PFNGLPROGRAMUNIFORM4IVPROC mProgramUniform4iv;
PFNGLPROGRAMUNIFORM4FPROC mProgramUniform4f;
PFNGLPROGRAMUNIFORM4FVPROC mProgramUniform4fv;
PFNGLPROGRAMUNIFORM4DPROC mProgramUniform4d;
PFNGLPROGRAMUNIFORM4DVPROC mProgramUniform4dv;
PFNGLPROGRAMUNIFORM4UIPROC mProgramUniform4ui;
PFNGLPROGRAMUNIFORM4UIVPROC mProgramUniform4uiv;
PFNGLPROGRAMUNIFORMMATRIX2FVPROC mProgramUniformMatrix2fv;
PFNGLPROGRAMUNIFORMMATRIX3FVPROC mProgramUniformMatrix3fv;
PFNGLPROGRAMUNIFORMMATRIX4FVPROC mProgramUniformMatrix4fv;
PFNGLPROGRAMUNIFORMMATRIX2DVPROC mProgramUniformMatrix2dv;
PFNGLPROGRAMUNIFORMMATRIX3DVPROC mProgramUniformMatrix3dv;
PFNGLPROGRAMUNIFORMMATRIX4DVPROC mProgramUniformMatrix4dv;
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC mProgramUniformMatrix2x3fv;
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC mProgramUniformMatrix3x2fv;
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC mProgramUniformMatrix2x4fv;
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC mProgramUniformMatrix4x2fv;
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC mProgramUniformMatrix3x4fv;
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC mProgramUniformMatrix4x3fv;
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC mProgramUniformMatrix2x3dv;
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC mProgramUniformMatrix3x2dv;
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC mProgramUniformMatrix2x4dv;
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC mProgramUniformMatrix4x2dv;
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC mProgramUniformMatrix3x4dv;
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC mProgramUniformMatrix4x3dv;
PFNGLVALIDATEPROGRAMPIPELINEPROC mValidateProgramPipeline;
PFNGLGETPROGRAMPIPELINEINFOLOGPROC mGetProgramPipelineInfoLog;
PFNGLVERTEXATTRIBL1DPROC mVertexAttribL1d;
PFNGLVERTEXATTRIBL2DPROC mVertexAttribL2d;
PFNGLVERTEXATTRIBL3DPROC mVertexAttribL3d;
PFNGLVERTEXATTRIBL4DPROC mVertexAttribL4d;
PFNGLVERTEXATTRIBL1DVPROC mVertexAttribL1dv;
PFNGLVERTEXATTRIBL2DVPROC mVertexAttribL2dv;
PFNGLVERTEXATTRIBL3DVPROC mVertexAttribL3dv;
PFNGLVERTEXATTRIBL4DVPROC mVertexAttribL4dv;
PFNGLVERTEXATTRIBLPOINTERPROC mVertexAttribLPointer;
PFNGLGETVERTEXATTRIBLDVPROC mGetVertexAttribLdv;
PFNGLVIEWPORTARRAYVPROC mViewportArrayv;
PFNGLVIEWPORTINDEXEDFPROC mViewportIndexedf;
PFNGLVIEWPORTINDEXEDFVPROC mViewportIndexedfv;
PFNGLSCISSORARRAYVPROC mScissorArrayv;
PFNGLSCISSORINDEXEDPROC mScissorIndexed;
PFNGLSCISSORINDEXEDVPROC mScissorIndexedv;
PFNGLDEPTHRANGEARRAYVPROC mDepthRangeArrayv;
PFNGLDEPTHRANGEINDEXEDPROC mDepthRangeIndexed;
PFNGLGETFLOATI_VPROC mGetFloati_v;
PFNGLGETDOUBLEI_VPROC mGetDoublei_v;
PFNGLCREATESYNCFROMCLEVENTARBPROC mCreateSyncFromCLeventARB;
PFNGLDEBUGMESSAGECONTROLARBPROC mDebugMessageControlARB;
PFNGLDEBUGMESSAGEINSERTARBPROC mDebugMessageInsertARB;
PFNGLDEBUGMESSAGECALLBACKARBPROC mDebugMessageCallbackARB;
PFNGLGETDEBUGMESSAGELOGARBPROC mGetDebugMessageLogARB;
PFNGLGETGRAPHICSRESETSTATUSARBPROC mGetGraphicsResetStatusARB;
PFNGLGETNTEXIMAGEARBPROC mGetnTexImageARB;
PFNGLREADNPIXELSARBPROC mReadnPixelsARB;
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC mGetnCompressedTexImageARB;
PFNGLGETNUNIFORMFVARBPROC mGetnUniformfvARB;
PFNGLGETNUNIFORMIVARBPROC mGetnUniformivARB;
PFNGLGETNUNIFORMUIVARBPROC mGetnUniformuivARB;
PFNGLGETNUNIFORMDVARBPROC mGetnUniformdvARB;
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC mDrawArraysInstancedBaseInstance;
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC mDrawElementsInstancedBaseInstance;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC mDrawElementsInstancedBaseVertexBaseInstance;
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC mDrawTransformFeedbackInstanced;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC mDrawTransformFeedbackStreamInstanced;
PFNGLGETINTERNALFORMATIVPROC mGetInternalformativ;
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC mGetActiveAtomicCounterBufferiv;
PFNGLBINDIMAGETEXTUREPROC mBindImageTexture;
PFNGLMEMORYBARRIERPROC mMemoryBarrier;
PFNGLTEXSTORAGE1DPROC mTexStorage1D;
PFNGLTEXSTORAGE2DPROC mTexStorage2D;
PFNGLTEXSTORAGE3DPROC mTexStorage3D;
PFNGLTEXTURESTORAGE1DEXTPROC mTextureStorage1DEXT;
PFNGLTEXTURESTORAGE2DEXTPROC mTextureStorage2DEXT;
PFNGLTEXTURESTORAGE3DEXTPROC mTextureStorage3DEXT;
PFNGLDEBUGMESSAGECONTROLPROC mDebugMessageControl;
PFNGLDEBUGMESSAGEINSERTPROC mDebugMessageInsert;
PFNGLDEBUGMESSAGECALLBACKPROC mDebugMessageCallback;
PFNGLGETDEBUGMESSAGELOGPROC mGetDebugMessageLog;
PFNGLPUSHDEBUGGROUPPROC mPushDebugGroup;
PFNGLPOPDEBUGGROUPPROC mPopDebugGroup;
PFNGLOBJECTLABELPROC mObjectLabel;
PFNGLGETOBJECTLABELPROC mGetObjectLabel;
PFNGLOBJECTPTRLABELPROC mObjectPtrLabel;
PFNGLGETOBJECTPTRLABELPROC mGetObjectPtrLabel;
PFNGLCLEARBUFFERDATAPROC mClearBufferData;
PFNGLCLEARBUFFERSUBDATAPROC mClearBufferSubData;
PFNGLCLEARNAMEDBUFFERDATAEXTPROC mClearNamedBufferDataEXT;
PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC mClearNamedBufferSubDataEXT;
PFNGLDISPATCHCOMPUTEPROC mDispatchCompute;
PFNGLDISPATCHCOMPUTEINDIRECTPROC mDispatchComputeIndirect;
PFNGLCOPYIMAGESUBDATAPROC mCopyImageSubData;
PFNGLTEXTUREVIEWPROC mTextureView;
PFNGLBINDVERTEXBUFFERPROC mBindVertexBuffer;
PFNGLVERTEXATTRIBFORMATPROC mVertexAttribFormat;
PFNGLVERTEXATTRIBIFORMATPROC mVertexAttribIFormat;
PFNGLVERTEXATTRIBLFORMATPROC mVertexAttribLFormat;
PFNGLVERTEXATTRIBBINDINGPROC mVertexAttribBinding;
PFNGLVERTEXBINDINGDIVISORPROC mVertexBindingDivisor;
PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC mVertexArrayBindVertexBufferEXT;
PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC mVertexArrayVertexAttribFormatEXT;
PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC mVertexArrayVertexAttribIFormatEXT;
PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC mVertexArrayVertexAttribLFormatEXT;
PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC mVertexArrayVertexAttribBindingEXT;
PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC mVertexArrayVertexBindingDivisorEXT;
PFNGLFRAMEBUFFERPARAMETERIPROC mFramebufferParameteri;
PFNGLGETFRAMEBUFFERPARAMETERIVPROC mGetFramebufferParameteriv;
PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC mNamedFramebufferParameteriEXT;
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC mGetNamedFramebufferParameterivEXT;
PFNGLGETINTERNALFORMATI64VPROC mGetInternalformati64v;
PFNGLINVALIDATETEXSUBIMAGEPROC mInvalidateTexSubImage;
PFNGLINVALIDATETEXIMAGEPROC mInvalidateTexImage;
PFNGLINVALIDATEBUFFERSUBDATAPROC mInvalidateBufferSubData;
PFNGLINVALIDATEBUFFERDATAPROC mInvalidateBufferData;
PFNGLINVALIDATEFRAMEBUFFERPROC mInvalidateFramebuffer;
PFNGLINVALIDATESUBFRAMEBUFFERPROC mInvalidateSubFramebuffer;
PFNGLMULTIDRAWARRAYSINDIRECTPROC mMultiDrawArraysIndirect;
PFNGLMULTIDRAWELEMENTSINDIRECTPROC mMultiDrawElementsIndirect;
PFNGLGETPROGRAMINTERFACEIVPROC mGetProgramInterfaceiv;
PFNGLGETPROGRAMRESOURCEINDEXPROC mGetProgramResourceIndex;
PFNGLGETPROGRAMRESOURCENAMEPROC mGetProgramResourceName;
PFNGLGETPROGRAMRESOURCEIVPROC mGetProgramResourceiv;
PFNGLGETPROGRAMRESOURCELOCATIONPROC mGetProgramResourceLocation;
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC mGetProgramResourceLocationIndex;
PFNGLSHADERSTORAGEBLOCKBINDINGPROC mShaderStorageBlockBinding;
PFNGLTEXBUFFERRANGEPROC mTexBufferRange;
PFNGLTEXTUREBUFFERRANGEEXTPROC mTextureBufferRangeEXT;
PFNGLTEXSTORAGE2DMULTISAMPLEPROC mTexStorage2DMultisample;
PFNGLTEXSTORAGE3DMULTISAMPLEPROC mTexStorage3DMultisample;
PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC mTextureStorage2DMultisampleEXT;
PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC mTextureStorage3DMultisampleEXT;

static void load_procs(void)
{
	mCullFace = (PFNGLCULLFACEPROC) get_proc("glCullFace");
	mFrontFace = (PFNGLFRONTFACEPROC) get_proc("glFrontFace");
	mHint = (PFNGLHINTPROC) get_proc("glHint");
	mLineWidth = (PFNGLLINEWIDTHPROC) get_proc("glLineWidth");
	mPointSize = (PFNGLPOINTSIZEPROC) get_proc("glPointSize");
	mPolygonMode = (PFNGLPOLYGONMODEPROC) get_proc("glPolygonMode");
	mScissor = (PFNGLSCISSORPROC) get_proc("glScissor");
	mTexParameterf = (PFNGLTEXPARAMETERFPROC) get_proc("glTexParameterf");
	mTexParameterfv = (PFNGLTEXPARAMETERFVPROC) get_proc("glTexParameterfv");
	mTexParameteri = (PFNGLTEXPARAMETERIPROC) get_proc("glTexParameteri");
	mTexParameteriv = (PFNGLTEXPARAMETERIVPROC) get_proc("glTexParameteriv");
	mTexImage1D = (PFNGLTEXIMAGE1DPROC) get_proc("glTexImage1D");
	mTexImage2D = (PFNGLTEXIMAGE2DPROC) get_proc("glTexImage2D");
	mDrawBuffer = (PFNGLDRAWBUFFERPROC) get_proc("glDrawBuffer");
	mClear = (PFNGLCLEARPROC) get_proc("glClear");
	mClearColor = (PFNGLCLEARCOLORPROC) get_proc("glClearColor");
	mClearStencil = (PFNGLCLEARSTENCILPROC) get_proc("glClearStencil");
	mClearDepth = (PFNGLCLEARDEPTHPROC) get_proc("glClearDepth");
	mStencilMask = (PFNGLSTENCILMASKPROC) get_proc("glStencilMask");
	mColorMask = (PFNGLCOLORMASKPROC) get_proc("glColorMask");
	mDepthMask = (PFNGLDEPTHMASKPROC) get_proc("glDepthMask");
	mDisable = (PFNGLDISABLEPROC) get_proc("glDisable");
	mEnable = (PFNGLENABLEPROC) get_proc("glEnable");
	mFinish = (PFNGLFINISHPROC) get_proc("glFinish");
	mFlush = (PFNGLFLUSHPROC) get_proc("glFlush");
	mBlendFunc = (PFNGLBLENDFUNCPROC) get_proc("glBlendFunc");
	mLogicOp = (PFNGLLOGICOPPROC) get_proc("glLogicOp");
	mStencilFunc = (PFNGLSTENCILFUNCPROC) get_proc("glStencilFunc");
	mStencilOp = (PFNGLSTENCILOPPROC) get_proc("glStencilOp");
	mDepthFunc = (PFNGLDEPTHFUNCPROC) get_proc("glDepthFunc");
	mPixelStoref = (PFNGLPIXELSTOREFPROC) get_proc("glPixelStoref");
	mPixelStorei = (PFNGLPIXELSTOREIPROC) get_proc("glPixelStorei");
	mReadBuffer = (PFNGLREADBUFFERPROC) get_proc("glReadBuffer");
	mReadPixels = (PFNGLREADPIXELSPROC) get_proc("glReadPixels");
	mGetBooleanv = (PFNGLGETBOOLEANVPROC) get_proc("glGetBooleanv");
	mGetDoublev = (PFNGLGETDOUBLEVPROC) get_proc("glGetDoublev");
	mGetError = (PFNGLGETERRORPROC) get_proc("glGetError");
	mGetFloatv = (PFNGLGETFLOATVPROC) get_proc("glGetFloatv");
	mGetIntegerv = (PFNGLGETINTEGERVPROC) get_proc("glGetIntegerv");
	mGetString = (PFNGLGETSTRINGPROC) get_proc("glGetString");
	mGetTexImage = (PFNGLGETTEXIMAGEPROC) get_proc("glGetTexImage");
	mGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC) get_proc("glGetTexParameterfv");
	mGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC) get_proc("glGetTexParameteriv");
	mGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC) get_proc("glGetTexLevelParameterfv");
	mGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC) get_proc("glGetTexLevelParameteriv");
	mIsEnabled = (PFNGLISENABLEDPROC) get_proc("glIsEnabled");
	mDepthRange = (PFNGLDEPTHRANGEPROC) get_proc("glDepthRange");
	mViewport = (PFNGLVIEWPORTPROC) get_proc("glViewport");
	mDrawArrays = (PFNGLDRAWARRAYSPROC) get_proc("glDrawArrays");
	mDrawElements = (PFNGLDRAWELEMENTSPROC) get_proc("glDrawElements");
	mGetPointerv = (PFNGLGETPOINTERVPROC) get_proc("glGetPointerv");
	mPolygonOffset = (PFNGLPOLYGONOFFSETPROC) get_proc("glPolygonOffset");
	mCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC) get_proc("glCopyTexImage1D");
	mCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC) get_proc("glCopyTexImage2D");
	mCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC) get_proc("glCopyTexSubImage1D");
	mCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC) get_proc("glCopyTexSubImage2D");
	mTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC) get_proc("glTexSubImage1D");
	mTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC) get_proc("glTexSubImage2D");
	mBindTexture = (PFNGLBINDTEXTUREPROC) get_proc("glBindTexture");
	mDeleteTextures = (PFNGLDELETETEXTURESPROC) get_proc("glDeleteTextures");
	mGenTextures = (PFNGLGENTEXTURESPROC) get_proc("glGenTextures");
	mIsTexture = (PFNGLISTEXTUREPROC) get_proc("glIsTexture");
	mBlendColor = (PFNGLBLENDCOLORPROC) get_proc("glBlendColor");
	mBlendEquation = (PFNGLBLENDEQUATIONPROC) get_proc("glBlendEquation");
	mDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC) get_proc("glDrawRangeElements");
	mTexImage3D = (PFNGLTEXIMAGE3DPROC) get_proc("glTexImage3D");
	mTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC) get_proc("glTexSubImage3D");
	mCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC) get_proc("glCopyTexSubImage3D");
	mActiveTexture = (PFNGLACTIVETEXTUREPROC) get_proc("glActiveTexture");
	mSampleCoverage = (PFNGLSAMPLECOVERAGEPROC) get_proc("glSampleCoverage");
	mCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC) get_proc("glCompressedTexImage3D");
	mCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC) get_proc("glCompressedTexImage2D");
	mCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC) get_proc("glCompressedTexImage1D");
	mCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) get_proc("glCompressedTexSubImage3D");
	mCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) get_proc("glCompressedTexSubImage2D");
	mCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) get_proc("glCompressedTexSubImage1D");
	mGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC) get_proc("glGetCompressedTexImage");
	mBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC) get_proc("glBlendFuncSeparate");
	mMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC) get_proc("glMultiDrawArrays");
	mMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC) get_proc("glMultiDrawElements");
	mPointParameterf = (PFNGLPOINTPARAMETERFPROC) get_proc("glPointParameterf");
	mPointParameterfv = (PFNGLPOINTPARAMETERFVPROC) get_proc("glPointParameterfv");
	mPointParameteri = (PFNGLPOINTPARAMETERIPROC) get_proc("glPointParameteri");
	mPointParameteriv = (PFNGLPOINTPARAMETERIVPROC) get_proc("glPointParameteriv");
	mGenQueries = (PFNGLGENQUERIESPROC) get_proc("glGenQueries");
	mDeleteQueries = (PFNGLDELETEQUERIESPROC) get_proc("glDeleteQueries");
	mIsQuery = (PFNGLISQUERYPROC) get_proc("glIsQuery");
	mBeginQuery = (PFNGLBEGINQUERYPROC) get_proc("glBeginQuery");
	mEndQuery = (PFNGLENDQUERYPROC) get_proc("glEndQuery");
	mGetQueryiv = (PFNGLGETQUERYIVPROC) get_proc("glGetQueryiv");
	mGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC) get_proc("glGetQueryObjectiv");
	mGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC) get_proc("glGetQueryObjectuiv");
	mBindBuffer = (PFNGLBINDBUFFERPROC) get_proc("glBindBuffer");
	mDeleteBuffers = (PFNGLDELETEBUFFERSPROC) get_proc("glDeleteBuffers");
	mGenBuffers = (PFNGLGENBUFFERSPROC) get_proc("glGenBuffers");
	mIsBuffer = (PFNGLISBUFFERPROC) get_proc("glIsBuffer");
	mBufferData = (PFNGLBUFFERDATAPROC) get_proc("glBufferData");
	mBufferSubData = (PFNGLBUFFERSUBDATAPROC) get_proc("glBufferSubData");
	mGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC) get_proc("glGetBufferSubData");
	mMapBuffer = (PFNGLMAPBUFFERPROC) get_proc("glMapBuffer");
	mUnmapBuffer = (PFNGLUNMAPBUFFERPROC) get_proc("glUnmapBuffer");
	mGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC) get_proc("glGetBufferParameteriv");
	mGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC) get_proc("glGetBufferPointerv");
	mBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC) get_proc("glBlendEquationSeparate");
	mDrawBuffers = (PFNGLDRAWBUFFERSPROC) get_proc("glDrawBuffers");
	mStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC) get_proc("glStencilOpSeparate");
	mStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC) get_proc("glStencilFuncSeparate");
	mStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC) get_proc("glStencilMaskSeparate");
	mAttachShader = (PFNGLATTACHSHADERPROC) get_proc("glAttachShader");
	mBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC) get_proc("glBindAttribLocation");
	mCompileShader = (PFNGLCOMPILESHADERPROC) get_proc("glCompileShader");
	mCreateProgram = (PFNGLCREATEPROGRAMPROC) get_proc("glCreateProgram");
	mCreateShader = (PFNGLCREATESHADERPROC) get_proc("glCreateShader");
	mDeleteProgram = (PFNGLDELETEPROGRAMPROC) get_proc("glDeleteProgram");
	mDeleteShader = (PFNGLDELETESHADERPROC) get_proc("glDeleteShader");
	mDetachShader = (PFNGLDETACHSHADERPROC) get_proc("glDetachShader");
	mDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC) get_proc("glDisableVertexAttribArray");
	mEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC) get_proc("glEnableVertexAttribArray");
	mGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC) get_proc("glGetActiveAttrib");
	mGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC) get_proc("glGetActiveUniform");
	mGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC) get_proc("glGetAttachedShaders");
	mGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC) get_proc("glGetAttribLocation");
	mGetProgramiv = (PFNGLGETPROGRAMIVPROC) get_proc("glGetProgramiv");
	mGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC) get_proc("glGetProgramInfoLog");
	mGetShaderiv = (PFNGLGETSHADERIVPROC) get_proc("glGetShaderiv");
	mGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC) get_proc("glGetShaderInfoLog");
	mGetShaderSource = (PFNGLGETSHADERSOURCEPROC) get_proc("glGetShaderSource");
	mGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC) get_proc("glGetUniformLocation");
	mGetUniformfv = (PFNGLGETUNIFORMFVPROC) get_proc("glGetUniformfv");
	mGetUniformiv = (PFNGLGETUNIFORMIVPROC) get_proc("glGetUniformiv");
	mGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC) get_proc("glGetVertexAttribdv");
	mGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC) get_proc("glGetVertexAttribfv");
	mGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC) get_proc("glGetVertexAttribiv");
	mGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC) get_proc("glGetVertexAttribPointerv");
	mIsProgram = (PFNGLISPROGRAMPROC) get_proc("glIsProgram");
	mIsShader = (PFNGLISSHADERPROC) get_proc("glIsShader");
	mLinkProgram = (PFNGLLINKPROGRAMPROC) get_proc("glLinkProgram");
	mShaderSource = (PFNGLSHADERSOURCEPROC) get_proc("glShaderSource");
	mUseProgram = (PFNGLUSEPROGRAMPROC) get_proc("glUseProgram");
	mUniform1f = (PFNGLUNIFORM1FPROC) get_proc("glUniform1f");
	mUniform2f = (PFNGLUNIFORM2FPROC) get_proc("glUniform2f");
	mUniform3f = (PFNGLUNIFORM3FPROC) get_proc("glUniform3f");
	mUniform4f = (PFNGLUNIFORM4FPROC) get_proc("glUniform4f");
	mUniform1i = (PFNGLUNIFORM1IPROC) get_proc("glUniform1i");
	mUniform2i = (PFNGLUNIFORM2IPROC) get_proc("glUniform2i");
	mUniform3i = (PFNGLUNIFORM3IPROC) get_proc("glUniform3i");
	mUniform4i = (PFNGLUNIFORM4IPROC) get_proc("glUniform4i");
	mUniform1fv = (PFNGLUNIFORM1FVPROC) get_proc("glUniform1fv");
	mUniform2fv = (PFNGLUNIFORM2FVPROC) get_proc("glUniform2fv");
	mUniform3fv = (PFNGLUNIFORM3FVPROC) get_proc("glUniform3fv");
	mUniform4fv = (PFNGLUNIFORM4FVPROC) get_proc("glUniform4fv");
	mUniform1iv = (PFNGLUNIFORM1IVPROC) get_proc("glUniform1iv");
	mUniform2iv = (PFNGLUNIFORM2IVPROC) get_proc("glUniform2iv");
	mUniform3iv = (PFNGLUNIFORM3IVPROC) get_proc("glUniform3iv");
	mUniform4iv = (PFNGLUNIFORM4IVPROC) get_proc("glUniform4iv");
	mUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC) get_proc("glUniformMatrix2fv");
	mUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC) get_proc("glUniformMatrix3fv");
	mUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC) get_proc("glUniformMatrix4fv");
	mValidateProgram = (PFNGLVALIDATEPROGRAMPROC) get_proc("glValidateProgram");
	mVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC) get_proc("glVertexAttrib1d");
	mVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC) get_proc("glVertexAttrib1dv");
	mVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC) get_proc("glVertexAttrib1f");
	mVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC) get_proc("glVertexAttrib1fv");
	mVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC) get_proc("glVertexAttrib1s");
	mVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC) get_proc("glVertexAttrib1sv");
	mVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC) get_proc("glVertexAttrib2d");
	mVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC) get_proc("glVertexAttrib2dv");
	mVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC) get_proc("glVertexAttrib2f");
	mVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC) get_proc("glVertexAttrib2fv");
	mVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC) get_proc("glVertexAttrib2s");
	mVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC) get_proc("glVertexAttrib2sv");
	mVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC) get_proc("glVertexAttrib3d");
	mVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC) get_proc("glVertexAttrib3dv");
	mVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC) get_proc("glVertexAttrib3f");
	mVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC) get_proc("glVertexAttrib3fv");
	mVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC) get_proc("glVertexAttrib3s");
	mVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC) get_proc("glVertexAttrib3sv");
	mVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC) get_proc("glVertexAttrib4Nbv");
	mVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC) get_proc("glVertexAttrib4Niv");
	mVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC) get_proc("glVertexAttrib4Nsv");
	mVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC) get_proc("glVertexAttrib4Nub");
	mVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC) get_proc("glVertexAttrib4Nubv");
	mVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC) get_proc("glVertexAttrib4Nuiv");
	mVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC) get_proc("glVertexAttrib4Nusv");
	mVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC) get_proc("glVertexAttrib4bv");
	mVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC) get_proc("glVertexAttrib4d");
	mVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC) get_proc("glVertexAttrib4dv");
	mVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC) get_proc("glVertexAttrib4f");
	mVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC) get_proc("glVertexAttrib4fv");
	mVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC) get_proc("glVertexAttrib4iv");
	mVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC) get_proc("glVertexAttrib4s");
	mVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC) get_proc("glVertexAttrib4sv");
	mVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC) get_proc("glVertexAttrib4ubv");
	mVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC) get_proc("glVertexAttrib4uiv");
	mVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC) get_proc("glVertexAttrib4usv");
	mVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC) get_proc("glVertexAttribPointer");
	mUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC) get_proc("glUniformMatrix2x3fv");
	mUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC) get_proc("glUniformMatrix3x2fv");
	mUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC) get_proc("glUniformMatrix2x4fv");
	mUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC) get_proc("glUniformMatrix4x2fv");
	mUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC) get_proc("glUniformMatrix3x4fv");
	mUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC) get_proc("glUniformMatrix4x3fv");
	mColorMaski = (PFNGLCOLORMASKIPROC) get_proc("glColorMaski");
	mGetBooleani_v = (PFNGLGETBOOLEANI_VPROC) get_proc("glGetBooleani_v");
	mGetIntegeri_v = (PFNGLGETINTEGERI_VPROC) get_proc("glGetIntegeri_v");
	mEnablei = (PFNGLENABLEIPROC) get_proc("glEnablei");
	mDisablei = (PFNGLDISABLEIPROC) get_proc("glDisablei");
	mIsEnabledi = (PFNGLISENABLEDIPROC) get_proc("glIsEnabledi");
	mBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC) get_proc("glBeginTransformFeedback");
	mEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC) get_proc("glEndTransformFeedback");
	mBindBufferRange = (PFNGLBINDBUFFERRANGEPROC) get_proc("glBindBufferRange");
	mBindBufferBase = (PFNGLBINDBUFFERBASEPROC) get_proc("glBindBufferBase");
	mTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC) get_proc("glTransformFeedbackVaryings");
	mGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) get_proc("glGetTransformFeedbackVarying");
	mClampColor = (PFNGLCLAMPCOLORPROC) get_proc("glClampColor");
	mBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC) get_proc("glBeginConditionalRender");
	mEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC) get_proc("glEndConditionalRender");
	mVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC) get_proc("glVertexAttribIPointer");
	mGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC) get_proc("glGetVertexAttribIiv");
	mGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC) get_proc("glGetVertexAttribIuiv");
	mVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC) get_proc("glVertexAttribI1i");
	mVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC) get_proc("glVertexAttribI2i");
	mVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC) get_proc("glVertexAttribI3i");
	mVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC) get_proc("glVertexAttribI4i");
	mVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC) get_proc("glVertexAttribI1ui");
	mVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC) get_proc("glVertexAttribI2ui");
	mVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC) get_proc("glVertexAttribI3ui");
	mVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC) get_proc("glVertexAttribI4ui");
	mVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC) get_proc("glVertexAttribI1iv");
	mVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC) get_proc("glVertexAttribI2iv");
	mVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC) get_proc("glVertexAttribI3iv");
	mVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC) get_proc("glVertexAttribI4iv");
	mVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC) get_proc("glVertexAttribI1uiv");
	mVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC) get_proc("glVertexAttribI2uiv");
	mVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC) get_proc("glVertexAttribI3uiv");
	mVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC) get_proc("glVertexAttribI4uiv");
	mVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC) get_proc("glVertexAttribI4bv");
	mVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC) get_proc("glVertexAttribI4sv");
	mVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC) get_proc("glVertexAttribI4ubv");
	mVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC) get_proc("glVertexAttribI4usv");
	mGetUniformuiv = (PFNGLGETUNIFORMUIVPROC) get_proc("glGetUniformuiv");
	mBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC) get_proc("glBindFragDataLocation");
	mGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC) get_proc("glGetFragDataLocation");
	mUniform1ui = (PFNGLUNIFORM1UIPROC) get_proc("glUniform1ui");
	mUniform2ui = (PFNGLUNIFORM2UIPROC) get_proc("glUniform2ui");
	mUniform3ui = (PFNGLUNIFORM3UIPROC) get_proc("glUniform3ui");
	mUniform4ui = (PFNGLUNIFORM4UIPROC) get_proc("glUniform4ui");
	mUniform1uiv = (PFNGLUNIFORM1UIVPROC) get_proc("glUniform1uiv");
	mUniform2uiv = (PFNGLUNIFORM2UIVPROC) get_proc("glUniform2uiv");
	mUniform3uiv = (PFNGLUNIFORM3UIVPROC) get_proc("glUniform3uiv");
	mUniform4uiv = (PFNGLUNIFORM4UIVPROC) get_proc("glUniform4uiv");
	mTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC) get_proc("glTexParameterIiv");
	mTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC) get_proc("glTexParameterIuiv");
	mGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC) get_proc("glGetTexParameterIiv");
	mGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC) get_proc("glGetTexParameterIuiv");
	mClearBufferiv = (PFNGLCLEARBUFFERIVPROC) get_proc("glClearBufferiv");
	mClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC) get_proc("glClearBufferuiv");
	mClearBufferfv = (PFNGLCLEARBUFFERFVPROC) get_proc("glClearBufferfv");
	mClearBufferfi = (PFNGLCLEARBUFFERFIPROC) get_proc("glClearBufferfi");
	mGetStringi = (PFNGLGETSTRINGIPROC) get_proc("glGetStringi");
	mDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC) get_proc("glDrawArraysInstanced");
	mDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC) get_proc("glDrawElementsInstanced");
	mTexBuffer = (PFNGLTEXBUFFERPROC) get_proc("glTexBuffer");
	mPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC) get_proc("glPrimitiveRestartIndex");
	mGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC) get_proc("glGetInteger64i_v");
	mGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC) get_proc("glGetBufferParameteri64v");
	mFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC) get_proc("glFramebufferTexture");
	mVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC) get_proc("glVertexAttribDivisor");
	mMinSampleShading = (PFNGLMINSAMPLESHADINGPROC) get_proc("glMinSampleShading");
	mBlendEquationi = (PFNGLBLENDEQUATIONIPROC) get_proc("glBlendEquationi");
	mBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC) get_proc("glBlendEquationSeparatei");
	mBlendFunci = (PFNGLBLENDFUNCIPROC) get_proc("glBlendFunci");
	mBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC) get_proc("glBlendFuncSeparatei");
	mIsRenderbuffer = (PFNGLISRENDERBUFFERPROC) get_proc("glIsRenderbuffer");
	mBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC) get_proc("glBindRenderbuffer");
	mDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC) get_proc("glDeleteRenderbuffers");
	mGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC) get_proc("glGenRenderbuffers");
	mRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC) get_proc("glRenderbufferStorage");
	mGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC) get_proc("glGetRenderbufferParameteriv");
	mIsFramebuffer = (PFNGLISFRAMEBUFFERPROC) get_proc("glIsFramebuffer");
	mBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC) get_proc("glBindFramebuffer");
	mDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC) get_proc("glDeleteFramebuffers");
	mGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC) get_proc("glGenFramebuffers");
	mCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC) get_proc("glCheckFramebufferStatus");
	mFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC) get_proc("glFramebufferTexture1D");
	mFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC) get_proc("glFramebufferTexture2D");
	mFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC) get_proc("glFramebufferTexture3D");
	mFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC) get_proc("glFramebufferRenderbuffer");
	mGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) get_proc("glGetFramebufferAttachmentParameteriv");
	mGenerateMipmap = (PFNGLGENERATEMIPMAPPROC) get_proc("glGenerateMipmap");
	mBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC) get_proc("glBlitFramebuffer");
	mRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) get_proc("glRenderbufferStorageMultisample");
	mFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) get_proc("glFramebufferTextureLayer");
	mMapBufferRange = (PFNGLMAPBUFFERRANGEPROC) get_proc("glMapBufferRange");
	mFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC) get_proc("glFlushMappedBufferRange");
	mBindVertexArray = (PFNGLBINDVERTEXARRAYPROC) get_proc("glBindVertexArray");
	mDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC) get_proc("glDeleteVertexArrays");
	mGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC) get_proc("glGenVertexArrays");
	mIsVertexArray = (PFNGLISVERTEXARRAYPROC) get_proc("glIsVertexArray");
	mGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC) get_proc("glGetUniformIndices");
	mGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC) get_proc("glGetActiveUniformsiv");
	mGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC) get_proc("glGetActiveUniformName");
	mGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC) get_proc("glGetUniformBlockIndex");
	mGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC) get_proc("glGetActiveUniformBlockiv");
	mGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) get_proc("glGetActiveUniformBlockName");
	mUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC) get_proc("glUniformBlockBinding");
	mCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC) get_proc("glCopyBufferSubData");
	mDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC) get_proc("glDrawElementsBaseVertex");
	mDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) get_proc("glDrawRangeElementsBaseVertex");
	mDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) get_proc("glDrawElementsInstancedBaseVertex");
	mMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) get_proc("glMultiDrawElementsBaseVertex");
	mProvokingVertex = (PFNGLPROVOKINGVERTEXPROC) get_proc("glProvokingVertex");
	mFenceSync = (PFNGLFENCESYNCPROC) get_proc("glFenceSync");
	mIsSync = (PFNGLISSYNCPROC) get_proc("glIsSync");
	mDeleteSync = (PFNGLDELETESYNCPROC) get_proc("glDeleteSync");
	mClientWaitSync = (PFNGLCLIENTWAITSYNCPROC) get_proc("glClientWaitSync");
	mWaitSync = (PFNGLWAITSYNCPROC) get_proc("glWaitSync");
	mGetInteger64v = (PFNGLGETINTEGER64VPROC) get_proc("glGetInteger64v");
	mGetSynciv = (PFNGLGETSYNCIVPROC) get_proc("glGetSynciv");
	mTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC) get_proc("glTexImage2DMultisample");
	mTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC) get_proc("glTexImage3DMultisample");
	mGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC) get_proc("glGetMultisamplefv");
	mSampleMaski = (PFNGLSAMPLEMASKIPROC) get_proc("glSampleMaski");
	mBlendEquationiARB = (PFNGLBLENDEQUATIONIARBPROC) get_proc("glBlendEquationiARB");
	mBlendEquationSeparateiARB = (PFNGLBLENDEQUATIONSEPARATEIARBPROC) get_proc("glBlendEquationSeparateiARB");
	mBlendFunciARB = (PFNGLBLENDFUNCIARBPROC) get_proc("glBlendFunciARB");
	mBlendFuncSeparateiARB = (PFNGLBLENDFUNCSEPARATEIARBPROC) get_proc("glBlendFuncSeparateiARB");
	mMinSampleShadingARB = (PFNGLMINSAMPLESHADINGARBPROC) get_proc("glMinSampleShadingARB");
	mNamedStringARB = (PFNGLNAMEDSTRINGARBPROC) get_proc("glNamedStringARB");
	mDeleteNamedStringARB = (PFNGLDELETENAMEDSTRINGARBPROC) get_proc("glDeleteNamedStringARB");
	mCompileShaderIncludeARB = (PFNGLCOMPILESHADERINCLUDEARBPROC) get_proc("glCompileShaderIncludeARB");
	mIsNamedStringARB = (PFNGLISNAMEDSTRINGARBPROC) get_proc("glIsNamedStringARB");
	mGetNamedStringARB = (PFNGLGETNAMEDSTRINGARBPROC) get_proc("glGetNamedStringARB");
	mGetNamedStringivARB = (PFNGLGETNAMEDSTRINGIVARBPROC) get_proc("glGetNamedStringivARB");
	mBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) get_proc("glBindFragDataLocationIndexed");
	mGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC) get_proc("glGetFragDataIndex");
	mGenSamplers = (PFNGLGENSAMPLERSPROC) get_proc("glGenSamplers");
	mDeleteSamplers = (PFNGLDELETESAMPLERSPROC) get_proc("glDeleteSamplers");
	mIsSampler = (PFNGLISSAMPLERPROC) get_proc("glIsSampler");
	mBindSampler = (PFNGLBINDSAMPLERPROC) get_proc("glBindSampler");
	mSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC) get_proc("glSamplerParameteri");
	mSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC) get_proc("glSamplerParameteriv");
	mSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC) get_proc("glSamplerParameterf");
	mSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC) get_proc("glSamplerParameterfv");
	mSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC) get_proc("glSamplerParameterIiv");
	mSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC) get_proc("glSamplerParameterIuiv");
	mGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC) get_proc("glGetSamplerParameteriv");
	mGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC) get_proc("glGetSamplerParameterIiv");
	mGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC) get_proc("glGetSamplerParameterfv");
	mGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC) get_proc("glGetSamplerParameterIuiv");
	mQueryCounter = (PFNGLQUERYCOUNTERPROC) get_proc("glQueryCounter");
	mGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC) get_proc("glGetQueryObjecti64v");
	mGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC) get_proc("glGetQueryObjectui64v");
	mVertexP2ui = (PFNGLVERTEXP2UIPROC) get_proc("glVertexP2ui");
	mVertexP2uiv = (PFNGLVERTEXP2UIVPROC) get_proc("glVertexP2uiv");
	mVertexP3ui = (PFNGLVERTEXP3UIPROC) get_proc("glVertexP3ui");
	mVertexP3uiv = (PFNGLVERTEXP3UIVPROC) get_proc("glVertexP3uiv");
	mVertexP4ui = (PFNGLVERTEXP4UIPROC) get_proc("glVertexP4ui");
	mVertexP4uiv = (PFNGLVERTEXP4UIVPROC) get_proc("glVertexP4uiv");
	mTexCoordP1ui = (PFNGLTEXCOORDP1UIPROC) get_proc("glTexCoordP1ui");
	mTexCoordP1uiv = (PFNGLTEXCOORDP1UIVPROC) get_proc("glTexCoordP1uiv");
	mTexCoordP2ui = (PFNGLTEXCOORDP2UIPROC) get_proc("glTexCoordP2ui");
	mTexCoordP2uiv = (PFNGLTEXCOORDP2UIVPROC) get_proc("glTexCoordP2uiv");
	mTexCoordP3ui = (PFNGLTEXCOORDP3UIPROC) get_proc("glTexCoordP3ui");
	mTexCoordP3uiv = (PFNGLTEXCOORDP3UIVPROC) get_proc("glTexCoordP3uiv");
	mTexCoordP4ui = (PFNGLTEXCOORDP4UIPROC) get_proc("glTexCoordP4ui");
	mTexCoordP4uiv = (PFNGLTEXCOORDP4UIVPROC) get_proc("glTexCoordP4uiv");
	mMultiTexCoordP1ui = (PFNGLMULTITEXCOORDP1UIPROC) get_proc("glMultiTexCoordP1ui");
	mMultiTexCoordP1uiv = (PFNGLMULTITEXCOORDP1UIVPROC) get_proc("glMultiTexCoordP1uiv");
	mMultiTexCoordP2ui = (PFNGLMULTITEXCOORDP2UIPROC) get_proc("glMultiTexCoordP2ui");
	mMultiTexCoordP2uiv = (PFNGLMULTITEXCOORDP2UIVPROC) get_proc("glMultiTexCoordP2uiv");
	mMultiTexCoordP3ui = (PFNGLMULTITEXCOORDP3UIPROC) get_proc("glMultiTexCoordP3ui");
	mMultiTexCoordP3uiv = (PFNGLMULTITEXCOORDP3UIVPROC) get_proc("glMultiTexCoordP3uiv");
	mMultiTexCoordP4ui = (PFNGLMULTITEXCOORDP4UIPROC) get_proc("glMultiTexCoordP4ui");
	mMultiTexCoordP4uiv = (PFNGLMULTITEXCOORDP4UIVPROC) get_proc("glMultiTexCoordP4uiv");
	mNormalP3ui = (PFNGLNORMALP3UIPROC) get_proc("glNormalP3ui");
	mNormalP3uiv = (PFNGLNORMALP3UIVPROC) get_proc("glNormalP3uiv");
	mColorP3ui = (PFNGLCOLORP3UIPROC) get_proc("glColorP3ui");
	mColorP3uiv = (PFNGLCOLORP3UIVPROC) get_proc("glColorP3uiv");
	mColorP4ui = (PFNGLCOLORP4UIPROC) get_proc("glColorP4ui");
	mColorP4uiv = (PFNGLCOLORP4UIVPROC) get_proc("glColorP4uiv");
	mSecondaryColorP3ui = (PFNGLSECONDARYCOLORP3UIPROC) get_proc("glSecondaryColorP3ui");
	mSecondaryColorP3uiv = (PFNGLSECONDARYCOLORP3UIVPROC) get_proc("glSecondaryColorP3uiv");
	mVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC) get_proc("glVertexAttribP1ui");
	mVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC) get_proc("glVertexAttribP1uiv");
	mVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC) get_proc("glVertexAttribP2ui");
	mVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC) get_proc("glVertexAttribP2uiv");
	mVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC) get_proc("glVertexAttribP3ui");
	mVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC) get_proc("glVertexAttribP3uiv");
	mVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC) get_proc("glVertexAttribP4ui");
	mVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC) get_proc("glVertexAttribP4uiv");
	mDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC) get_proc("glDrawArraysIndirect");
	mDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC) get_proc("glDrawElementsIndirect");
	mUniform1d = (PFNGLUNIFORM1DPROC) get_proc("glUniform1d");
	mUniform2d = (PFNGLUNIFORM2DPROC) get_proc("glUniform2d");
	mUniform3d = (PFNGLUNIFORM3DPROC) get_proc("glUniform3d");
	mUniform4d = (PFNGLUNIFORM4DPROC) get_proc("glUniform4d");
	mUniform1dv = (PFNGLUNIFORM1DVPROC) get_proc("glUniform1dv");
	mUniform2dv = (PFNGLUNIFORM2DVPROC) get_proc("glUniform2dv");
	mUniform3dv = (PFNGLUNIFORM3DVPROC) get_proc("glUniform3dv");
	mUniform4dv = (PFNGLUNIFORM4DVPROC) get_proc("glUniform4dv");
	mUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC) get_proc("glUniformMatrix2dv");
	mUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC) get_proc("glUniformMatrix3dv");
	mUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC) get_proc("glUniformMatrix4dv");
	mUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC) get_proc("glUniformMatrix2x3dv");
	mUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC) get_proc("glUniformMatrix2x4dv");
	mUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC) get_proc("glUniformMatrix3x2dv");
	mUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC) get_proc("glUniformMatrix3x4dv");
	mUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC) get_proc("glUniformMatrix4x2dv");
	mUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC) get_proc("glUniformMatrix4x3dv");
	mGetUniformdv = (PFNGLGETUNIFORMDVPROC) get_proc("glGetUniformdv");
	mGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) get_proc("glGetSubroutineUniformLocation");
	mGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC) get_proc("glGetSubroutineIndex");
	mGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) get_proc("glGetActiveSubroutineUniformiv");
	mGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) get_proc("glGetActiveSubroutineUniformName");
	mGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC) get_proc("glGetActiveSubroutineName");
	mUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC) get_proc("glUniformSubroutinesuiv");
	mGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC) get_proc("glGetUniformSubroutineuiv");
	mGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC) get_proc("glGetProgramStageiv");
	mPatchParameteri = (PFNGLPATCHPARAMETERIPROC) get_proc("glPatchParameteri");
	mPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC) get_proc("glPatchParameterfv");
	mBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC) get_proc("glBindTransformFeedback");
	mDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC) get_proc("glDeleteTransformFeedbacks");
	mGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC) get_proc("glGenTransformFeedbacks");
	mIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC) get_proc("glIsTransformFeedback");
	mPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC) get_proc("glPauseTransformFeedback");
	mResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC) get_proc("glResumeTransformFeedback");
	mDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC) get_proc("glDrawTransformFeedback");
	mDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) get_proc("glDrawTransformFeedbackStream");
	mBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC) get_proc("glBeginQueryIndexed");
	mEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC) get_proc("glEndQueryIndexed");
	mGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC) get_proc("glGetQueryIndexediv");
	mReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC) get_proc("glReleaseShaderCompiler");
	mShaderBinary = (PFNGLSHADERBINARYPROC) get_proc("glShaderBinary");
	mGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC) get_proc("glGetShaderPrecisionFormat");
	mDepthRangef = (PFNGLDEPTHRANGEFPROC) get_proc("glDepthRangef");
	mClearDepthf = (PFNGLCLEARDEPTHFPROC) get_proc("glClearDepthf");
	mGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC) get_proc("glGetProgramBinary");
	mProgramBinary = (PFNGLPROGRAMBINARYPROC) get_proc("glProgramBinary");
	mProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC) get_proc("glProgramParameteri");
	mUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC) get_proc("glUseProgramStages");
	mActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC) get_proc("glActiveShaderProgram");
	mCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC) get_proc("glCreateShaderProgramv");
	mBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC) get_proc("glBindProgramPipeline");
	mDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC) get_proc("glDeleteProgramPipelines");
	mGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC) get_proc("glGenProgramPipelines");
	mIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC) get_proc("glIsProgramPipeline");
	mGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC) get_proc("glGetProgramPipelineiv");
	mProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC) get_proc("glProgramUniform1i");
	mProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC) get_proc("glProgramUniform1iv");
	mProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC) get_proc("glProgramUniform1f");
	mProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC) get_proc("glProgramUniform1fv");
	mProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC) get_proc("glProgramUniform1d");
	mProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC) get_proc("glProgramUniform1dv");
	mProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC) get_proc("glProgramUniform1ui");
	mProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC) get_proc("glProgramUniform1uiv");
	mProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC) get_proc("glProgramUniform2i");
	mProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC) get_proc("glProgramUniform2iv");
	mProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC) get_proc("glProgramUniform2f");
	mProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC) get_proc("glProgramUniform2fv");
	mProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC) get_proc("glProgramUniform2d");
	mProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC) get_proc("glProgramUniform2dv");
	mProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC) get_proc("glProgramUniform2ui");
	mProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC) get_proc("glProgramUniform2uiv");
	mProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC) get_proc("glProgramUniform3i");
	mProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC) get_proc("glProgramUniform3iv");
	mProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC) get_proc("glProgramUniform3f");
	mProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC) get_proc("glProgramUniform3fv");
	mProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC) get_proc("glProgramUniform3d");
	mProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC) get_proc("glProgramUniform3dv");
	mProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC) get_proc("glProgramUniform3ui");
	mProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC) get_proc("glProgramUniform3uiv");
	mProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC) get_proc("glProgramUniform4i");
	mProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC) get_proc("glProgramUniform4iv");
	mProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC) get_proc("glProgramUniform4f");
	mProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC) get_proc("glProgramUniform4fv");
	mProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC) get_proc("glProgramUniform4d");
	mProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC) get_proc("glProgramUniform4dv");
	mProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC) get_proc("glProgramUniform4ui");
	mProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC) get_proc("glProgramUniform4uiv");
	mProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC) get_proc("glProgramUniformMatrix2fv");
	mProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC) get_proc("glProgramUniformMatrix3fv");
	mProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC) get_proc("glProgramUniformMatrix4fv");
	mProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC) get_proc("glProgramUniformMatrix2dv");
	mProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC) get_proc("glProgramUniformMatrix3dv");
	mProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC) get_proc("glProgramUniformMatrix4dv");
	mProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) get_proc("glProgramUniformMatrix2x3fv");
	mProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) get_proc("glProgramUniformMatrix3x2fv");
	mProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) get_proc("glProgramUniformMatrix2x4fv");
	mProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) get_proc("glProgramUniformMatrix4x2fv");
	mProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) get_proc("glProgramUniformMatrix3x4fv");
	mProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) get_proc("glProgramUniformMatrix4x3fv");
	mProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) get_proc("glProgramUniformMatrix2x3dv");
	mProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) get_proc("glProgramUniformMatrix3x2dv");
	mProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) get_proc("glProgramUniformMatrix2x4dv");
	mProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) get_proc("glProgramUniformMatrix4x2dv");
	mProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) get_proc("glProgramUniformMatrix3x4dv");
	mProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) get_proc("glProgramUniformMatrix4x3dv");
	mValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC) get_proc("glValidateProgramPipeline");
	mGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC) get_proc("glGetProgramPipelineInfoLog");
	mVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC) get_proc("glVertexAttribL1d");
	mVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC) get_proc("glVertexAttribL2d");
	mVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC) get_proc("glVertexAttribL3d");
	mVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC) get_proc("glVertexAttribL4d");
	mVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC) get_proc("glVertexAttribL1dv");
	mVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC) get_proc("glVertexAttribL2dv");
	mVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC) get_proc("glVertexAttribL3dv");
	mVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC) get_proc("glVertexAttribL4dv");
	mVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC) get_proc("glVertexAttribLPointer");
	mGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC) get_proc("glGetVertexAttribLdv");
	mViewportArrayv = (PFNGLVIEWPORTARRAYVPROC) get_proc("glViewportArrayv");
	mViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC) get_proc("glViewportIndexedf");
	mViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC) get_proc("glViewportIndexedfv");
	mScissorArrayv = (PFNGLSCISSORARRAYVPROC) get_proc("glScissorArrayv");
	mScissorIndexed = (PFNGLSCISSORINDEXEDPROC) get_proc("glScissorIndexed");
	mScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC) get_proc("glScissorIndexedv");
	mDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC) get_proc("glDepthRangeArrayv");
	mDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC) get_proc("glDepthRangeIndexed");
	mGetFloati_v = (PFNGLGETFLOATI_VPROC) get_proc("glGetFloati_v");
	mGetDoublei_v = (PFNGLGETDOUBLEI_VPROC) get_proc("glGetDoublei_v");
	mCreateSyncFromCLeventARB = (PFNGLCREATESYNCFROMCLEVENTARBPROC) get_proc("glCreateSyncFromCLeventARB");
	mDebugMessageControlARB = (PFNGLDEBUGMESSAGECONTROLARBPROC) get_proc("glDebugMessageControlARB");
	mDebugMessageInsertARB = (PFNGLDEBUGMESSAGEINSERTARBPROC) get_proc("glDebugMessageInsertARB");
	mDebugMessageCallbackARB = (PFNGLDEBUGMESSAGECALLBACKARBPROC) get_proc("glDebugMessageCallbackARB");
	mGetDebugMessageLogARB = (PFNGLGETDEBUGMESSAGELOGARBPROC) get_proc("glGetDebugMessageLogARB");
	mGetGraphicsResetStatusARB = (PFNGLGETGRAPHICSRESETSTATUSARBPROC) get_proc("glGetGraphicsResetStatusARB");
	mGetnTexImageARB = (PFNGLGETNTEXIMAGEARBPROC) get_proc("glGetnTexImageARB");
	mReadnPixelsARB = (PFNGLREADNPIXELSARBPROC) get_proc("glReadnPixelsARB");
	mGetnCompressedTexImageARB = (PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) get_proc("glGetnCompressedTexImageARB");
	mGetnUniformfvARB = (PFNGLGETNUNIFORMFVARBPROC) get_proc("glGetnUniformfvARB");
	mGetnUniformivARB = (PFNGLGETNUNIFORMIVARBPROC) get_proc("glGetnUniformivARB");
	mGetnUniformuivARB = (PFNGLGETNUNIFORMUIVARBPROC) get_proc("glGetnUniformuivARB");
	mGetnUniformdvARB = (PFNGLGETNUNIFORMDVARBPROC) get_proc("glGetnUniformdvARB");
	mDrawArraysInstancedBaseInstance = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) get_proc("glDrawArraysInstancedBaseInstance");
	mDrawElementsInstancedBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) get_proc("glDrawElementsInstancedBaseInstance");
	mDrawElementsInstancedBaseVertexBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) get_proc("glDrawElementsInstancedBaseVertexBaseInstance");
	mDrawTransformFeedbackInstanced = (PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) get_proc("glDrawTransformFeedbackInstanced");
	mDrawTransformFeedbackStreamInstanced = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) get_proc("glDrawTransformFeedbackStreamInstanced");
	mGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC) get_proc("glGetInternalformativ");
	mGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) get_proc("glGetActiveAtomicCounterBufferiv");
	mBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC) get_proc("glBindImageTexture");
	mMemoryBarrier = (PFNGLMEMORYBARRIERPROC) get_proc("glMemoryBarrier");
	mTexStorage1D = (PFNGLTEXSTORAGE1DPROC) get_proc("glTexStorage1D");
	mTexStorage2D = (PFNGLTEXSTORAGE2DPROC) get_proc("glTexStorage2D");
	mTexStorage3D = (PFNGLTEXSTORAGE3DPROC) get_proc("glTexStorage3D");
	mTextureStorage1DEXT = (PFNGLTEXTURESTORAGE1DEXTPROC) get_proc("glTextureStorage1DEXT");
	mTextureStorage2DEXT = (PFNGLTEXTURESTORAGE2DEXTPROC) get_proc("glTextureStorage2DEXT");
	mTextureStorage3DEXT = (PFNGLTEXTURESTORAGE3DEXTPROC) get_proc("glTextureStorage3DEXT");
	mDebugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC) get_proc("glDebugMessageControl");
	mDebugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC) get_proc("glDebugMessageInsert");
	mDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC) get_proc("glDebugMessageCallback");
	mGetDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC) get_proc("glGetDebugMessageLog");
	mPushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC) get_proc("glPushDebugGroup");
	mPopDebugGroup = (PFNGLPOPDEBUGGROUPPROC) get_proc("glPopDebugGroup");
	mObjectLabel = (PFNGLOBJECTLABELPROC) get_proc("glObjectLabel");
	mGetObjectLabel = (PFNGLGETOBJECTLABELPROC) get_proc("glGetObjectLabel");
	mObjectPtrLabel = (PFNGLOBJECTPTRLABELPROC) get_proc("glObjectPtrLabel");
	mGetObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC) get_proc("glGetObjectPtrLabel");
	mClearBufferData = (PFNGLCLEARBUFFERDATAPROC) get_proc("glClearBufferData");
	mClearBufferSubData = (PFNGLCLEARBUFFERSUBDATAPROC) get_proc("glClearBufferSubData");
	mClearNamedBufferDataEXT = (PFNGLCLEARNAMEDBUFFERDATAEXTPROC) get_proc("glClearNamedBufferDataEXT");
	mClearNamedBufferSubDataEXT = (PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC) get_proc("glClearNamedBufferSubDataEXT");
	mDispatchCompute = (PFNGLDISPATCHCOMPUTEPROC) get_proc("glDispatchCompute");
	mDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC) get_proc("glDispatchComputeIndirect");
	mCopyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC) get_proc("glCopyImageSubData");
	mTextureView = (PFNGLTEXTUREVIEWPROC) get_proc("glTextureView");
	mBindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC) get_proc("glBindVertexBuffer");
	mVertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC) get_proc("glVertexAttribFormat");
	mVertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC) get_proc("glVertexAttribIFormat");
	mVertexAttribLFormat = (PFNGLVERTEXATTRIBLFORMATPROC) get_proc("glVertexAttribLFormat");
	mVertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC) get_proc("glVertexAttribBinding");
	mVertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC) get_proc("glVertexBindingDivisor");
	mVertexArrayBindVertexBufferEXT = (PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC) get_proc("glVertexArrayBindVertexBufferEXT");
	mVertexArrayVertexAttribFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC) get_proc("glVertexArrayVertexAttribFormatEXT");
	mVertexArrayVertexAttribIFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC) get_proc("glVertexArrayVertexAttribIFormatEXT");
	mVertexArrayVertexAttribLFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC) get_proc("glVertexArrayVertexAttribLFormatEXT");
	mVertexArrayVertexAttribBindingEXT = (PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC) get_proc("glVertexArrayVertexAttribBindingEXT");
	mVertexArrayVertexBindingDivisorEXT = (PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC) get_proc("glVertexArrayVertexBindingDivisorEXT");
	mFramebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC) get_proc("glFramebufferParameteri");
	mGetFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC) get_proc("glGetFramebufferParameteriv");
	mNamedFramebufferParameteriEXT = (PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC) get_proc("glNamedFramebufferParameteriEXT");
	mGetNamedFramebufferParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC) get_proc("glGetNamedFramebufferParameterivEXT");
	mGetInternalformati64v = (PFNGLGETINTERNALFORMATI64VPROC) get_proc("glGetInternalformati64v");
	mInvalidateTexSubImage = (PFNGLINVALIDATETEXSUBIMAGEPROC) get_proc("glInvalidateTexSubImage");
	mInvalidateTexImage = (PFNGLINVALIDATETEXIMAGEPROC) get_proc("glInvalidateTexImage");
	mInvalidateBufferSubData = (PFNGLINVALIDATEBUFFERSUBDATAPROC) get_proc("glInvalidateBufferSubData");
	mInvalidateBufferData = (PFNGLINVALIDATEBUFFERDATAPROC) get_proc("glInvalidateBufferData");
	mInvalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC) get_proc("glInvalidateFramebuffer");
	mInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC) get_proc("glInvalidateSubFramebuffer");
	mMultiDrawArraysIndirect = (PFNGLMULTIDRAWARRAYSINDIRECTPROC) get_proc("glMultiDrawArraysIndirect");
	mMultiDrawElementsIndirect = (PFNGLMULTIDRAWELEMENTSINDIRECTPROC) get_proc("glMultiDrawElementsIndirect");
	mGetProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC) get_proc("glGetProgramInterfaceiv");
	mGetProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC) get_proc("glGetProgramResourceIndex");
	mGetProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC) get_proc("glGetProgramResourceName");
	mGetProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC) get_proc("glGetProgramResourceiv");
	mGetProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC) get_proc("glGetProgramResourceLocation");
	mGetProgramResourceLocationIndex = (PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) get_proc("glGetProgramResourceLocationIndex");
	mShaderStorageBlockBinding = (PFNGLSHADERSTORAGEBLOCKBINDINGPROC) get_proc("glShaderStorageBlockBinding");
	mTexBufferRange = (PFNGLTEXBUFFERRANGEPROC) get_proc("glTexBufferRange");
	mTextureBufferRangeEXT = (PFNGLTEXTUREBUFFERRANGEEXTPROC) get_proc("glTextureBufferRangeEXT");
	mTexStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC) get_proc("glTexStorage2DMultisample");
	mTexStorage3DMultisample = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC) get_proc("glTexStorage3DMultisample");
	mTextureStorage2DMultisampleEXT = (PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC) get_proc("glTextureStorage2DMultisampleEXT");
	mTextureStorage3DMultisampleEXT = (PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC) get_proc("glTextureStorage3DMultisampleEXT");

}

#define ERROR_CHECK
#ifdef ERROR_CHECK
#include <iostream>

void ErrorCheck()
{
    GLenum error = mGetError();
    if (error != GL_NO_ERROR)
    {
        const char* errorMessage;
        switch (error)
        {
            case GL_INVALID_ENUM:
                // An unacceptable value is specified for an enumerated argument. The offending command is ignored and has no other side effect than to set the error flag.
                errorMessage = "GL_INVALID_ENUM";
                break;
               
            case GL_INVALID_VALUE:
                //A numeric argument is out of range. The offending command is ignored and has no other side effect than to set the error flag.
                errorMessage = "GL_INVALID_VALUE";
                break;
                
            case GL_INVALID_OPERATION:
                //The specified operation is not allowed in the current state. The offending command is ignored and has no other side effect than to set the error flag.
                errorMessage = "GL_INVALID_OPERATION";
                break;
                
            case GL_INVALID_FRAMEBUFFER_OPERATION:
                //The framebuffer object is not complete. The offending command is ignored and has no other side effect than to set the error flag.
                errorMessage = "GL_INVALID_FRAMEBUFFER_OPERATION";
                break;
                
            case GL_OUT_OF_MEMORY:
                //There is not enough memory left to execute the command. The state of the GL is undefined, except for the state of the error flags, after this error is recorded.
                errorMessage = "GL_OUT_OF_MEMORY";
                break;
                
            case GL_STACK_UNDERFLOW:
                //An attempt has been made to perform an operation that would cause an internal stack to underflow.
                errorMessage = "GL_STACK_UNDERFLOW";
                break;
                
            case GL_STACK_OVERFLOW:
                //An attempt has been made to perform an operation that would cause an internal stack to overflow.
                errorMessage = "GL_STACK_OVERFLOW";
                break;
        }
        
        std::cout << "OpenGL Error: " << errorMessage << std::endl;
        exit(1);
    }
}

#define EC(FUNCTION) { FUNCTION; ErrorCheck(); }
#define EC_RET(FUNCTION) { auto ret = FUNCTION; ErrorCheck(); return ret; }

#else

#define EC(FUNCTION) { FUNCTION; }
#define EC_RET(FUNCTION) { return FUNCTION; }
#endif

 void GL::CullFace(GLenum mode) EC(mCullFace(mode))
 void GL::FrontFace(GLenum mode) EC(mFrontFace(mode))
 void GL::Hint(GLenum target, GLenum mode) EC(mHint(target,mode))
 void GL::LineWidth(GLfloat width) EC(mLineWidth(width))
 void GL::PointSize(GLfloat size) EC(mPointSize(size))
 void GL::PolygonMode(GLenum face, GLenum mode) EC(mPolygonMode(face,mode))
 void GL::Scissor(GLint x, GLint y, GLsizei width, GLsizei height) EC(mScissor(x,y,width,height))
 void GL::TexParameterf(GLenum target, GLenum pname, GLfloat param) EC(mTexParameterf(target,pname,param))
 void GL::TexParameterfv(GLenum target, GLenum pname, const GLfloat *params) EC(mTexParameterfv(target,pname,params))
 void GL::TexParameteri(GLenum target, GLenum pname, GLint param) EC(mTexParameteri(target,pname,param))
 void GL::TexParameteriv(GLenum target, GLenum pname, const GLint *params) EC(mTexParameteriv(target,pname,params))
 void GL::TexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels) EC(mTexImage1D(target,level,internalformat,width,border,format,type,pixels))
 void GL::TexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels) EC(mTexImage2D(target,level,internalformat,width,height,border,format,type,pixels))
 void GL::DrawBuffer(GLenum mode) EC(mDrawBuffer(mode))
 void GL::Clear(GLbitfield mask) EC(mClear(mask))
 void GL::ClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) EC(mClearColor(red,green,blue,alpha))
 void GL::ClearStencil(GLint s) EC(mClearStencil(s))
 void GL::ClearDepth(GLdouble depth) EC(mClearDepth(depth))
 void GL::StencilMask(GLuint mask) EC(mStencilMask(mask))
 void GL::ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) EC(mColorMask(red,green,blue,alpha))
 void GL::DepthMask(GLboolean flag) EC(mDepthMask(flag))
 void GL::Disable(GLenum cap) EC(mDisable(cap))
 void GL::Enable(GLenum cap) EC(mEnable(cap))
 void GL::Finish(void) EC(mFinish())
 void GL::Flush(void) EC(mFlush())
 void GL::BlendFunc(GLenum sfactor, GLenum dfactor) EC(mBlendFunc(sfactor,dfactor))
 void GL::LogicOp(GLenum opcode) EC(mLogicOp(opcode))
 void GL::StencilFunc(GLenum func, GLint ref, GLuint mask) EC(mStencilFunc(func,ref,mask))
 void GL::StencilOp(GLenum fail, GLenum zfail, GLenum zpass) EC(mStencilOp(fail,zfail,zpass))
 void GL::DepthFunc(GLenum func) EC(mDepthFunc(func))
 void GL::PixelStoref(GLenum pname, GLfloat param) EC(mPixelStoref(pname,param))
 void GL::PixelStorei(GLenum pname, GLint param) EC(mPixelStorei(pname,param))
 void GL::ReadBuffer(GLenum mode) EC(mReadBuffer(mode))
 void GL::ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels) EC(mReadPixels(x,y,width,height,format,type,pixels))
 void GL::GetBooleanv(GLenum pname, GLboolean *params) EC(mGetBooleanv(pname,params))
 void GL::GetDoublev(GLenum pname, GLdouble *params) EC(mGetDoublev(pname,params))
 void GL::GetFloatv(GLenum pname, GLfloat *params) EC(mGetFloatv(pname,params))
 void GL::GetIntegerv(GLenum pname, GLint *params) EC(mGetIntegerv(pname,params))
 const GLubyte * GL::GetString(GLenum name) EC_RET(mGetString(name))
 void GL::GetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels) EC(mGetTexImage(target,level,format,type,pixels))
 void GL::GetTexParameterfv(GLenum target, GLenum pname, GLfloat *params) EC(mGetTexParameterfv(target,pname,params))
 void GL::GetTexParameteriv(GLenum target, GLenum pname, GLint *params) EC(mGetTexParameteriv(target,pname,params))
 void GL::GetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params) EC(mGetTexLevelParameterfv(target,level,pname,params))
 void GL::GetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params) EC(mGetTexLevelParameteriv(target,level,pname,params))
 GLboolean GL::IsEnabled(GLenum cap) EC_RET(mIsEnabled(cap))
 void GL::DepthRange(GLdouble near, GLdouble far) EC(mDepthRange(near,far))
 void GL::Viewport(GLint x, GLint y, GLsizei width, GLsizei height) EC(mViewport(x,y,width,height))
 void GL::DrawArrays(GLenum mode, GLint first, GLsizei count) EC(mDrawArrays(mode,first,count))
 void GL::DrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices) EC(mDrawElements(mode,count,type,indices))
 void GL::GetPointerv(GLenum pname, GLvoid* *params) EC(mGetPointerv(pname,params))
 void GL::PolygonOffset(GLfloat factor, GLfloat units) EC(mPolygonOffset(factor,units))
 void GL::CopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) EC(mCopyTexImage1D(target,level,internalformat,x,y,width,border))
 void GL::CopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) EC(mCopyTexImage2D(target,level,internalformat,x,y,width,height,border))
 void GL::CopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) EC(mCopyTexSubImage1D(target,level,xoffset,x,y,width))
 void GL::CopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) EC(mCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height))
 void GL::TexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels) EC(mTexSubImage1D(target,level,xoffset,width,format,type,pixels))
 void GL::TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) EC(mTexSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels))
 void GL::BindTexture(GLenum target, GLuint texture) EC(mBindTexture(target,texture))
 void GL::DeleteTextures(GLsizei n, const GLuint *textures) EC(mDeleteTextures(n,textures))
 void GL::GenTextures(GLsizei n, GLuint *textures) EC(mGenTextures(n,textures))
 GLboolean GL::IsTexture(GLuint texture) EC_RET(mIsTexture(texture))
 void GL::BlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) EC(mBlendColor(red,green,blue,alpha))
 void GL::BlendEquation(GLenum mode) EC(mBlendEquation(mode))
 void GL::DrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices) EC(mDrawRangeElements(mode,start,end,count,type,indices))
 void GL::TexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels) EC(mTexImage3D(target,level,internalformat,width,height,depth,border,format,type,pixels))
 void GL::TexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels) EC(mTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,pixels))
 void GL::CopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) EC(mCopyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height))
 void GL::ActiveTexture(GLenum texture) EC(mActiveTexture(texture))
 void GL::SampleCoverage(GLfloat value, GLboolean invert) EC(mSampleCoverage(value,invert))
 void GL::CompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data) EC(mCompressedTexImage3D(target,level,internalformat,width,height,depth,border,imageSize,data))
 void GL::CompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data) EC(mCompressedTexImage2D(target,level,internalformat,width,height,border,imageSize,data))
 void GL::CompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data) EC(mCompressedTexImage1D(target,level,internalformat,width,border,imageSize,data))
 void GL::CompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data) EC(mCompressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data))
 void GL::CompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data) EC(mCompressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,imageSize,data))
 void GL::CompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data) EC(mCompressedTexSubImage1D(target,level,xoffset,width,format,imageSize,data))
 void GL::GetCompressedTexImage(GLenum target, GLint level, GLvoid *img) EC(mGetCompressedTexImage(target,level,img))
 void GL::BlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) EC(mBlendFuncSeparate(sfactorRGB,dfactorRGB,sfactorAlpha,dfactorAlpha))
 void GL::MultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount) EC(mMultiDrawArrays(mode,first,count,drawcount))
 void GL::MultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei drawcount) EC(mMultiDrawElements(mode,count,type,indices,drawcount))
 void GL::PointParameterf(GLenum pname, GLfloat param) EC(mPointParameterf(pname,param))
 void GL::PointParameterfv(GLenum pname, const GLfloat *params) EC(mPointParameterfv(pname,params))
 void GL::PointParameteri(GLenum pname, GLint param) EC(mPointParameteri(pname,param))
 void GL::PointParameteriv(GLenum pname, const GLint *params) EC(mPointParameteriv(pname,params))
 void GL::GenQueries(GLsizei n, GLuint *ids) EC(mGenQueries(n,ids))
 void GL::DeleteQueries(GLsizei n, const GLuint *ids) EC(mDeleteQueries(n,ids))
 GLboolean GL::IsQuery(GLuint id) EC_RET(mIsQuery(id))
 void GL::BeginQuery(GLenum target, GLuint id) EC(mBeginQuery(target,id))
 void GL::EndQuery(GLenum target) EC(mEndQuery(target))
 void GL::GetQueryiv(GLenum target, GLenum pname, GLint *params) EC(mGetQueryiv(target,pname,params))
 void GL::GetQueryObjectiv(GLuint id, GLenum pname, GLint *params) EC(mGetQueryObjectiv(id,pname,params))
 void GL::GetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params) EC(mGetQueryObjectuiv(id,pname,params))
 void GL::BindBuffer(GLenum target, GLuint buffer) EC(mBindBuffer(target,buffer))
 void GL::DeleteBuffers(GLsizei n, const GLuint *buffers) EC(mDeleteBuffers(n,buffers))
 void GL::GenBuffers(GLsizei n, GLuint *buffers) EC(mGenBuffers(n,buffers))
 GLboolean GL::IsBuffer(GLuint buffer) EC_RET(mIsBuffer(buffer))
 void GL::BufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage) EC(mBufferData(target,size,data,usage))
 void GL::BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data) EC(mBufferSubData(target,offset,size,data))
 void GL::GetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data) EC(mGetBufferSubData(target,offset,size,data))
 GLvoid* GL::MapBuffer(GLenum target, GLenum access) EC(mMapBuffer(target,access))
 GLboolean GL::UnmapBuffer(GLenum target) EC_RET(mUnmapBuffer(target))
 void GL::GetBufferParameteriv(GLenum target, GLenum pname, GLint *params) EC(mGetBufferParameteriv(target,pname,params))
 void GL::GetBufferPointerv(GLenum target, GLenum pname, GLvoid* *params) EC(mGetBufferPointerv(target,pname,params))
 void GL::BlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) EC(mBlendEquationSeparate(modeRGB,modeAlpha))
 void GL::DrawBuffers(GLsizei n, const GLenum *bufs) EC(mDrawBuffers(n,bufs))
 void GL::StencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) EC(mStencilOpSeparate(face,sfail,dpfail,dppass))
 void GL::StencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) EC(mStencilFuncSeparate(face,func,ref,mask))
 void GL::StencilMaskSeparate(GLenum face, GLuint mask) EC(mStencilMaskSeparate(face,mask))
 void GL::AttachShader(GLuint program, GLuint shader) EC(mAttachShader(program,shader))
 void GL::BindAttribLocation(GLuint program, GLuint index, const GLchar *name) EC(mBindAttribLocation(program,index,name))
 void GL::CompileShader(GLuint shader) EC(mCompileShader(shader))
 GLuint GL::CreateProgram(void) EC_RET(mCreateProgram())
 GLuint GL::CreateShader(GLenum type) EC_RET(mCreateShader(type))
 void GL::DeleteProgram(GLuint program) EC(mDeleteProgram(program))
 void GL::DeleteShader(GLuint shader) EC(mDeleteShader(shader))
 void GL::DetachShader(GLuint program, GLuint shader) EC(mDetachShader(program,shader))
 void GL::DisableVertexAttribArray(GLuint index) EC(mDisableVertexAttribArray(index))
 void GL::EnableVertexAttribArray(GLuint index) EC(mEnableVertexAttribArray(index))
 void GL::GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) EC(mGetActiveAttrib(program,index,bufSize,length,size,type,name))
 void GL::GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) EC(mGetActiveUniform(program,index,bufSize,length,size,type,name))
 void GL::GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj) EC(mGetAttachedShaders(program,maxCount,count,obj))
 GLint GL::GetAttribLocation(GLuint program, const GLchar *name) EC_RET(mGetAttribLocation(program,name))
 void GL::GetProgramiv(GLuint program, GLenum pname, GLint *params) EC(mGetProgramiv(program,pname,params))
 void GL::GetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) EC(mGetProgramInfoLog(program,bufSize,length,infoLog))
 void GL::GetShaderiv(GLuint shader, GLenum pname, GLint *params) EC(mGetShaderiv(shader,pname,params))
 void GL::GetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) EC(mGetShaderInfoLog(shader,bufSize,length,infoLog))
 void GL::GetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) EC(mGetShaderSource(shader,bufSize,length,source))
 GLint GL::GetUniformLocation(GLuint program, const GLchar *name) EC_RET(mGetUniformLocation(program,name))
 void GL::GetUniformfv(GLuint program, GLint location, GLfloat *params) EC(mGetUniformfv(program,location,params))
 void GL::GetUniformiv(GLuint program, GLint location, GLint *params) EC(mGetUniformiv(program,location,params))
 void GL::GetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params) EC(mGetVertexAttribdv(index,pname,params))
 void GL::GetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params) EC(mGetVertexAttribfv(index,pname,params))
 void GL::GetVertexAttribiv(GLuint index, GLenum pname, GLint *params) EC(mGetVertexAttribiv(index,pname,params))
 void GL::GetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid* *pointer) EC(mGetVertexAttribPointerv(index,pname,pointer))
 GLboolean GL::IsProgram(GLuint program) EC_RET(mIsProgram(program))
 GLboolean GL::IsShader(GLuint shader) EC_RET(mIsShader(shader))
 void GL::LinkProgram(GLuint program) EC(mLinkProgram(program))
 void GL::ShaderSource(GLuint shader, GLsizei count, const GLchar* const *string, const GLint *length) EC(mShaderSource(shader,count,string,length))
 void GL::UseProgram(GLuint program) EC(mUseProgram(program))
 void GL::Uniform1f(GLint location, GLfloat v0) EC(mUniform1f(location,v0))
 void GL::Uniform2f(GLint location, GLfloat v0, GLfloat v1) EC(mUniform2f(location,v0,v1))
 void GL::Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) EC(mUniform3f(location,v0,v1,v2))
 void GL::Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) EC(mUniform4f(location,v0,v1,v2,v3))
 void GL::Uniform1i(GLint location, GLint v0) EC(mUniform1i(location,v0))
 void GL::Uniform2i(GLint location, GLint v0, GLint v1) EC(mUniform2i(location,v0,v1))
 void GL::Uniform3i(GLint location, GLint v0, GLint v1, GLint v2) EC(mUniform3i(location,v0,v1,v2))
 void GL::Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) EC(mUniform4i(location,v0,v1,v2,v3))
 void GL::Uniform1fv(GLint location, GLsizei count, const GLfloat *value) EC(mUniform1fv(location,count,value))
 void GL::Uniform2fv(GLint location, GLsizei count, const GLfloat *value) EC(mUniform2fv(location,count,value))
 void GL::Uniform3fv(GLint location, GLsizei count, const GLfloat *value) EC(mUniform3fv(location,count,value))
 void GL::Uniform4fv(GLint location, GLsizei count, const GLfloat *value) EC(mUniform4fv(location,count,value))
 void GL::Uniform1iv(GLint location, GLsizei count, const GLint *value) EC(mUniform1iv(location,count,value))
 void GL::Uniform2iv(GLint location, GLsizei count, const GLint *value) EC(mUniform2iv(location,count,value))
 void GL::Uniform3iv(GLint location, GLsizei count, const GLint *value) EC(mUniform3iv(location,count,value))
 void GL::Uniform4iv(GLint location, GLsizei count, const GLint *value) EC(mUniform4iv(location,count,value))
 void GL::UniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) EC(mUniformMatrix2fv(location,count,transpose,value))
 void GL::UniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) EC(mUniformMatrix3fv(location,count,transpose,value))
 void GL::UniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) EC(mUniformMatrix4fv(location,count,transpose,value))
 void GL::ValidateProgram(GLuint program) EC(mValidateProgram(program))
 void GL::VertexAttrib1d(GLuint index, GLdouble x) EC(mVertexAttrib1d(index,x))
 void GL::VertexAttrib1dv(GLuint index, const GLdouble *v) EC(mVertexAttrib1dv(index,v))
 void GL::VertexAttrib1f(GLuint index, GLfloat x) EC(mVertexAttrib1f(index,x))
 void GL::VertexAttrib1fv(GLuint index, const GLfloat *v) EC(mVertexAttrib1fv(index,v))
 void GL::VertexAttrib1s(GLuint index, GLshort x) EC(mVertexAttrib1s(index,x))
 void GL::VertexAttrib1sv(GLuint index, const GLshort *v) EC(mVertexAttrib1sv(index,v))
 void GL::VertexAttrib2d(GLuint index, GLdouble x, GLdouble y) EC(mVertexAttrib2d(index,x,y))
 void GL::VertexAttrib2dv(GLuint index, const GLdouble *v) EC(mVertexAttrib2dv(index,v))
 void GL::VertexAttrib2f(GLuint index, GLfloat x, GLfloat y) EC(mVertexAttrib2f(index,x,y))
 void GL::VertexAttrib2fv(GLuint index, const GLfloat *v) EC(mVertexAttrib2fv(index,v))
 void GL::VertexAttrib2s(GLuint index, GLshort x, GLshort y) EC(mVertexAttrib2s(index,x,y))
 void GL::VertexAttrib2sv(GLuint index, const GLshort *v) EC(mVertexAttrib2sv(index,v))
 void GL::VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) EC(mVertexAttrib3d(index,x,y,z))
 void GL::VertexAttrib3dv(GLuint index, const GLdouble *v) EC(mVertexAttrib3dv(index,v))
 void GL::VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) EC(mVertexAttrib3f(index,x,y,z))
 void GL::VertexAttrib3fv(GLuint index, const GLfloat *v) EC(mVertexAttrib3fv(index,v))
 void GL::VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) EC(mVertexAttrib3s(index,x,y,z))
 void GL::VertexAttrib3sv(GLuint index, const GLshort *v) EC(mVertexAttrib3sv(index,v))
 void GL::VertexAttrib4Nbv(GLuint index, const GLbyte *v) EC(mVertexAttrib4Nbv(index,v))
 void GL::VertexAttrib4Niv(GLuint index, const GLint *v) EC(mVertexAttrib4Niv(index,v))
 void GL::VertexAttrib4Nsv(GLuint index, const GLshort *v) EC(mVertexAttrib4Nsv(index,v))
 void GL::VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) EC(mVertexAttrib4Nub(index,x,y,z,w))
 void GL::VertexAttrib4Nubv(GLuint index, const GLubyte *v) EC(mVertexAttrib4Nubv(index,v))
 void GL::VertexAttrib4Nuiv(GLuint index, const GLuint *v) EC(mVertexAttrib4Nuiv(index,v))
 void GL::VertexAttrib4Nusv(GLuint index, const GLushort *v) EC(mVertexAttrib4Nusv(index,v))
 void GL::VertexAttrib4bv(GLuint index, const GLbyte *v) EC(mVertexAttrib4bv(index,v))
 void GL::VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) EC(mVertexAttrib4d(index,x,y,z,w))
 void GL::VertexAttrib4dv(GLuint index, const GLdouble *v) EC(mVertexAttrib4dv(index,v))
 void GL::VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) EC(mVertexAttrib4f(index,x,y,z,w))
 void GL::VertexAttrib4fv(GLuint index, const GLfloat *v) EC(mVertexAttrib4fv(index,v))
 void GL::VertexAttrib4iv(GLuint index, const GLint *v) EC(mVertexAttrib4iv(index,v))
 void GL::VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) EC(mVertexAttrib4s(index,x,y,z,w))
 void GL::VertexAttrib4sv(GLuint index, const GLshort *v) EC(mVertexAttrib4sv(index,v))
 void GL::VertexAttrib4ubv(GLuint index, const GLubyte *v) EC(mVertexAttrib4ubv(index,v))
 void GL::VertexAttrib4uiv(GLuint index, const GLuint *v) EC(mVertexAttrib4uiv(index,v))
 void GL::VertexAttrib4usv(GLuint index, const GLushort *v) EC(mVertexAttrib4usv(index,v))
 void GL::VertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer) EC(mVertexAttribPointer(index,size,type,normalized,stride,pointer))
 void GL::UniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) EC(mUniformMatrix2x3fv(location,count,transpose,value))
 void GL::UniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) EC(mUniformMatrix3x2fv(location,count,transpose,value))
 void GL::UniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) EC(mUniformMatrix2x4fv(location,count,transpose,value))
 void GL::UniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) EC(mUniformMatrix4x2fv(location,count,transpose,value))
 void GL::UniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) EC(mUniformMatrix3x4fv(location,count,transpose,value))
 void GL::UniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) EC(mUniformMatrix4x3fv(location,count,transpose,value))
 void GL::ColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) EC(mColorMaski(index,r,g,b,a))
 void GL::GetBooleani_v(GLenum target, GLuint index, GLboolean *data) EC(mGetBooleani_v(target,index,data))
 void GL::GetIntegeri_v(GLenum target, GLuint index, GLint *data) EC(mGetIntegeri_v(target,index,data))
 void GL::Enablei(GLenum target, GLuint index) EC(mEnablei(target,index))
 void GL::Disablei(GLenum target, GLuint index) EC(mDisablei(target,index))
 GLboolean GL::IsEnabledi(GLenum target, GLuint index) EC_RET(mIsEnabledi(target,index))
 void GL::BeginTransformFeedback(GLenum primitiveMode) EC(mBeginTransformFeedback(primitiveMode))
 void GL::EndTransformFeedback(void) EC(mEndTransformFeedback())
 void GL::BindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) EC(mBindBufferRange(target,index,buffer,offset,size))
 void GL::BindBufferBase(GLenum target, GLuint index, GLuint buffer) EC(mBindBufferBase(target,index,buffer))
 void GL::TransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar* const *varyings, GLenum bufferMode) EC(mTransformFeedbackVaryings(program,count,varyings,bufferMode))
 void GL::GetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) EC(mGetTransformFeedbackVarying(program,index,bufSize,length,size,type,name))
 void GL::ClampColor(GLenum target, GLenum clamp) EC(mClampColor(target,clamp))
 void GL::BeginConditionalRender(GLuint id, GLenum mode) EC(mBeginConditionalRender(id,mode))
 void GL::EndConditionalRender(void) EC(mEndConditionalRender())
 void GL::VertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) EC(mVertexAttribIPointer(index,size,type,stride,pointer))
 void GL::GetVertexAttribIiv(GLuint index, GLenum pname, GLint *params) EC(mGetVertexAttribIiv(index,pname,params))
 void GL::GetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params) EC(mGetVertexAttribIuiv(index,pname,params))
 void GL::VertexAttribI1i(GLuint index, GLint x) EC(mVertexAttribI1i(index,x))
 void GL::VertexAttribI2i(GLuint index, GLint x, GLint y) EC(mVertexAttribI2i(index,x,y))
 void GL::VertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) EC(mVertexAttribI3i(index,x,y,z))
 void GL::VertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) EC(mVertexAttribI4i(index,x,y,z,w))
 void GL::VertexAttribI1ui(GLuint index, GLuint x) EC(mVertexAttribI1ui(index,x))
 void GL::VertexAttribI2ui(GLuint index, GLuint x, GLuint y) EC(mVertexAttribI2ui(index,x,y))
 void GL::VertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) EC(mVertexAttribI3ui(index,x,y,z))
 void GL::VertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) EC(mVertexAttribI4ui(index,x,y,z,w))
 void GL::VertexAttribI1iv(GLuint index, const GLint *v) EC(mVertexAttribI1iv(index,v))
 void GL::VertexAttribI2iv(GLuint index, const GLint *v) EC(mVertexAttribI2iv(index,v))
 void GL::VertexAttribI3iv(GLuint index, const GLint *v) EC(mVertexAttribI3iv(index,v))
 void GL::VertexAttribI4iv(GLuint index, const GLint *v) EC(mVertexAttribI4iv(index,v))
 void GL::VertexAttribI1uiv(GLuint index, const GLuint *v) EC(mVertexAttribI1uiv(index,v))
 void GL::VertexAttribI2uiv(GLuint index, const GLuint *v) EC(mVertexAttribI2uiv(index,v))
 void GL::VertexAttribI3uiv(GLuint index, const GLuint *v) EC(mVertexAttribI3uiv(index,v))
 void GL::VertexAttribI4uiv(GLuint index, const GLuint *v) EC(mVertexAttribI4uiv(index,v))
 void GL::VertexAttribI4bv(GLuint index, const GLbyte *v) EC(mVertexAttribI4bv(index,v))
 void GL::VertexAttribI4sv(GLuint index, const GLshort *v) EC(mVertexAttribI4sv(index,v))
 void GL::VertexAttribI4ubv(GLuint index, const GLubyte *v) EC(mVertexAttribI4ubv(index,v))
 void GL::VertexAttribI4usv(GLuint index, const GLushort *v) EC(mVertexAttribI4usv(index,v))
 void GL::GetUniformuiv(GLuint program, GLint location, GLuint *params) EC(mGetUniformuiv(program,location,params))
 void GL::BindFragDataLocation(GLuint program, GLuint color, const GLchar *name) EC(mBindFragDataLocation(program,color,name))
 GLint GL::GetFragDataLocation(GLuint program, const GLchar *name) EC_RET(mGetFragDataLocation(program,name))
 void GL::Uniform1ui(GLint location, GLuint v0) EC(mUniform1ui(location,v0))
 void GL::Uniform2ui(GLint location, GLuint v0, GLuint v1) EC(mUniform2ui(location,v0,v1))
 void GL::Uniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) EC(mUniform3ui(location,v0,v1,v2))
 void GL::Uniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) EC(mUniform4ui(location,v0,v1,v2,v3))
 void GL::Uniform1uiv(GLint location, GLsizei count, const GLuint *value) EC(mUniform1uiv(location,count,value))
 void GL::Uniform2uiv(GLint location, GLsizei count, const GLuint *value) EC(mUniform2uiv(location,count,value))
 void GL::Uniform3uiv(GLint location, GLsizei count, const GLuint *value) EC(mUniform3uiv(location,count,value))
 void GL::Uniform4uiv(GLint location, GLsizei count, const GLuint *value) EC(mUniform4uiv(location,count,value))
 void GL::TexParameterIiv(GLenum target, GLenum pname, const GLint *params) EC(mTexParameterIiv(target,pname,params))
 void GL::TexParameterIuiv(GLenum target, GLenum pname, const GLuint *params) EC(mTexParameterIuiv(target,pname,params))
 void GL::GetTexParameterIiv(GLenum target, GLenum pname, GLint *params) EC(mGetTexParameterIiv(target,pname,params))
 void GL::GetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params) EC(mGetTexParameterIuiv(target,pname,params))
 void GL::ClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value) EC(mClearBufferiv(buffer,drawbuffer,value))
 void GL::ClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value) EC(mClearBufferuiv(buffer,drawbuffer,value))
 void GL::ClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value) EC(mClearBufferfv(buffer,drawbuffer,value))
 void GL::ClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) EC(mClearBufferfi(buffer,drawbuffer,depth,stencil))
 const GLubyte * GL::GetStringi(GLenum name, GLuint index) EC_RET(mGetStringi(name,index))
 void GL::DrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) EC(mDrawArraysInstanced(mode,first,count,instancecount))
 void GL::DrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instancecount) EC(mDrawElementsInstanced(mode,count,type,indices,instancecount))
 void GL::TexBuffer(GLenum target, GLenum internalformat, GLuint buffer) EC(mTexBuffer(target,internalformat,buffer))
 void GL::PrimitiveRestartIndex(GLuint index) EC(mPrimitiveRestartIndex(index))
 void GL::GetInteger64i_v(GLenum target, GLuint index, GLint64 *data) EC(mGetInteger64i_v(target,index,data))
 void GL::GetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params) EC(mGetBufferParameteri64v(target,pname,params))
 void GL::FramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) EC(mFramebufferTexture(target,attachment,texture,level))
 void GL::VertexAttribDivisor(GLuint index, GLuint divisor) EC(mVertexAttribDivisor(index,divisor))
 void GL::MinSampleShading(GLfloat value) EC(mMinSampleShading(value))
 void GL::BlendEquationi(GLuint buf, GLenum mode) EC(mBlendEquationi(buf,mode))
 void GL::BlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) EC(mBlendEquationSeparatei(buf,modeRGB,modeAlpha))
 void GL::BlendFunci(GLuint buf, GLenum src, GLenum dst) EC(mBlendFunci(buf,src,dst))
 void GL::BlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) EC(mBlendFuncSeparatei(buf,srcRGB,dstRGB,srcAlpha,dstAlpha))
 GLboolean GL::IsRenderbuffer(GLuint renderbuffer) EC_RET(mIsRenderbuffer(renderbuffer))
 void GL::BindRenderbuffer(GLenum target, GLuint renderbuffer) EC(mBindRenderbuffer(target,renderbuffer))
 void GL::DeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers) EC(mDeleteRenderbuffers(n,renderbuffers))
 void GL::GenRenderbuffers(GLsizei n, GLuint *renderbuffers) EC(mGenRenderbuffers(n,renderbuffers))
 void GL::RenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) EC(mRenderbufferStorage(target,internalformat,width,height))
 void GL::GetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params) EC(mGetRenderbufferParameteriv(target,pname,params))
 GLboolean GL::IsFramebuffer(GLuint framebuffer) EC_RET(mIsFramebuffer(framebuffer))
 void GL::BindFramebuffer(GLenum target, GLuint framebuffer) EC(mBindFramebuffer(target,framebuffer))
 void GL::DeleteFramebuffers(GLsizei n, const GLuint *framebuffers) EC(mDeleteFramebuffers(n,framebuffers))
 void GL::GenFramebuffers(GLsizei n, GLuint *framebuffers) EC(mGenFramebuffers(n,framebuffers))
 GLenum GL::CheckFramebufferStatus(GLenum target) EC_RET(mCheckFramebufferStatus(target))
 void GL::FramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) EC(mFramebufferTexture1D(target,attachment,textarget,texture,level))
 void GL::FramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) EC(mFramebufferTexture2D(target,attachment,textarget,texture,level))
 void GL::FramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) EC(mFramebufferTexture3D(target,attachment,textarget,texture,level,zoffset))
 void GL::FramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) EC(mFramebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer))
 void GL::GetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params) EC(mGetFramebufferAttachmentParameteriv(target,attachment,pname,params))
 void GL::GenerateMipmap(GLenum target) EC(mGenerateMipmap(target))
 void GL::BlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) EC(mBlitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter))
 void GL::RenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) EC(mRenderbufferStorageMultisample(target,samples,internalformat,width,height))
 void GL::FramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) EC(mFramebufferTextureLayer(target,attachment,texture,level,layer))
 GLvoid* GL::MapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) EC(mMapBufferRange(target,offset,length,access))
 void GL::FlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) EC(mFlushMappedBufferRange(target,offset,length))
 void GL::BindVertexArray(GLuint array) EC(mBindVertexArray(array))
 void GL::DeleteVertexArrays(GLsizei n, const GLuint *arrays) EC(mDeleteVertexArrays(n,arrays))
 void GL::GenVertexArrays(GLsizei n, GLuint *arrays) EC(mGenVertexArrays(n,arrays))
 GLboolean GL::IsVertexArray(GLuint array) EC_RET(mIsVertexArray(array))
 void GL::GetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices) EC(mGetUniformIndices(program,uniformCount,uniformNames,uniformIndices))
 void GL::GetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params) EC(mGetActiveUniformsiv(program,uniformCount,uniformIndices,pname,params))
 void GL::GetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName) EC(mGetActiveUniformName(program,uniformIndex,bufSize,length,uniformName))
 GLuint GL::GetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName) EC_RET(mGetUniformBlockIndex(program,uniformBlockName))
 void GL::GetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params) EC(mGetActiveUniformBlockiv(program,uniformBlockIndex,pname,params))
 void GL::GetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName) EC(mGetActiveUniformBlockName(program,uniformBlockIndex,bufSize,length,uniformBlockName))
 void GL::UniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) EC(mUniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding))
 void GL::CopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) EC(mCopyBufferSubData(readTarget,writeTarget,readOffset,writeOffset,size))
 void GL::DrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex) EC(mDrawElementsBaseVertex(mode,count,type,indices,basevertex))
 void GL::DrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex) EC(mDrawRangeElementsBaseVertex(mode,start,end,count,type,indices,basevertex))
 void GL::DrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instancecount, GLint basevertex) EC(mDrawElementsInstancedBaseVertex(mode,count,type,indices,instancecount,basevertex))
 void GL::MultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei drawcount, const GLint *basevertex) EC(mMultiDrawElementsBaseVertex(mode,count,type,indices,drawcount,basevertex))
 void GL::ProvokingVertex(GLenum mode) EC(mProvokingVertex(mode))
 GLsync GL::FenceSync(GLenum condition, GLbitfield flags) EC_RET(mFenceSync(condition,flags))
 GLboolean GL::IsSync(GLsync sync) EC_RET(mIsSync(sync))
 void GL::DeleteSync(GLsync sync) EC(mDeleteSync(sync))
 GLenum GL::ClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) EC_RET(mClientWaitSync(sync,flags,timeout))
 void GL::WaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) EC(mWaitSync(sync,flags,timeout))
 void GL::GetInteger64v(GLenum pname, GLint64 *params) EC(mGetInteger64v(pname,params))
 void GL::GetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) EC(mGetSynciv(sync,pname,bufSize,length,values))
 void GL::TexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) EC(mTexImage2DMultisample(target,samples,internalformat,width,height,fixedsamplelocations))
 void GL::TexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) EC(mTexImage3DMultisample(target,samples,internalformat,width,height,depth,fixedsamplelocations))
 void GL::GetMultisamplefv(GLenum pname, GLuint index, GLfloat *val) EC(mGetMultisamplefv(pname,index,val))
 void GL::SampleMaski(GLuint index, GLbitfield mask) EC(mSampleMaski(index,mask))
 void GL::BlendEquationiARB(GLuint buf, GLenum mode) EC(mBlendEquationiARB(buf,mode))
 void GL::BlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha) EC(mBlendEquationSeparateiARB(buf,modeRGB,modeAlpha))
 void GL::BlendFunciARB(GLuint buf, GLenum src, GLenum dst) EC(mBlendFunciARB(buf,src,dst))
 void GL::BlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) EC(mBlendFuncSeparateiARB(buf,srcRGB,dstRGB,srcAlpha,dstAlpha))
 void GL::MinSampleShadingARB(GLfloat value) EC(mMinSampleShadingARB(value))
 void GL::NamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string) EC(mNamedStringARB(type,namelen,name,stringlen,string))
 void GL::DeleteNamedStringARB(GLint namelen, const GLchar *name) EC(mDeleteNamedStringARB(namelen,name))
 void GL::CompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar* *path, const GLint *length) EC(mCompileShaderIncludeARB(shader,count,path,length))
 GLboolean GL::IsNamedStringARB(GLint namelen, const GLchar *name) EC_RET(mIsNamedStringARB(namelen,name))
 void GL::GetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string) EC(mGetNamedStringARB(namelen,name,bufSize,stringlen,string))
 void GL::GetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params) EC(mGetNamedStringivARB(namelen,name,pname,params))
 void GL::BindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name) EC(mBindFragDataLocationIndexed(program,colorNumber,index,name))
 GLint GL::GetFragDataIndex(GLuint program, const GLchar *name) EC_RET(mGetFragDataIndex(program,name))
 void GL::GenSamplers(GLsizei count, GLuint *samplers) EC(mGenSamplers(count,samplers))
 void GL::DeleteSamplers(GLsizei count, const GLuint *samplers) EC(mDeleteSamplers(count,samplers))
 GLboolean GL::IsSampler(GLuint sampler) EC_RET(mIsSampler(sampler))
 void GL::BindSampler(GLuint unit, GLuint sampler) EC(mBindSampler(unit,sampler))
 void GL::SamplerParameteri(GLuint sampler, GLenum pname, GLint param) EC(mSamplerParameteri(sampler,pname,param))
 void GL::SamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param) EC(mSamplerParameteriv(sampler,pname,param))
 void GL::SamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) EC(mSamplerParameterf(sampler,pname,param))
 void GL::SamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param) EC(mSamplerParameterfv(sampler,pname,param))
 void GL::SamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param) EC(mSamplerParameterIiv(sampler,pname,param))
 void GL::SamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param) EC(mSamplerParameterIuiv(sampler,pname,param))
 void GL::GetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params) EC(mGetSamplerParameteriv(sampler,pname,params))
 void GL::GetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params) EC(mGetSamplerParameterIiv(sampler,pname,params))
 void GL::GetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params) EC(mGetSamplerParameterfv(sampler,pname,params))
 void GL::GetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params) EC(mGetSamplerParameterIuiv(sampler,pname,params))
 void GL::QueryCounter(GLuint id, GLenum target) EC(mQueryCounter(id,target))
 void GL::GetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params) EC(mGetQueryObjecti64v(id,pname,params))
 void GL::GetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params) EC(mGetQueryObjectui64v(id,pname,params))
 void GL::VertexP2ui(GLenum type, GLuint value) EC(mVertexP2ui(type,value))
 void GL::VertexP2uiv(GLenum type, const GLuint *value) EC(mVertexP2uiv(type,value))
 void GL::VertexP3ui(GLenum type, GLuint value) EC(mVertexP3ui(type,value))
 void GL::VertexP3uiv(GLenum type, const GLuint *value) EC(mVertexP3uiv(type,value))
 void GL::VertexP4ui(GLenum type, GLuint value) EC(mVertexP4ui(type,value))
 void GL::VertexP4uiv(GLenum type, const GLuint *value) EC(mVertexP4uiv(type,value))
 void GL::TexCoordP1ui(GLenum type, GLuint coords) EC(mTexCoordP1ui(type,coords))
 void GL::TexCoordP1uiv(GLenum type, const GLuint *coords) EC(mTexCoordP1uiv(type,coords))
 void GL::TexCoordP2ui(GLenum type, GLuint coords) EC(mTexCoordP2ui(type,coords))
 void GL::TexCoordP2uiv(GLenum type, const GLuint *coords) EC(mTexCoordP2uiv(type,coords))
 void GL::TexCoordP3ui(GLenum type, GLuint coords) EC(mTexCoordP3ui(type,coords))
 void GL::TexCoordP3uiv(GLenum type, const GLuint *coords) EC(mTexCoordP3uiv(type,coords))
 void GL::TexCoordP4ui(GLenum type, GLuint coords) EC(mTexCoordP4ui(type,coords))
 void GL::TexCoordP4uiv(GLenum type, const GLuint *coords) EC(mTexCoordP4uiv(type,coords))
 void GL::MultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords) EC(mMultiTexCoordP1ui(texture,type,coords))
 void GL::MultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords) EC(mMultiTexCoordP1uiv(texture,type,coords))
 void GL::MultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords) EC(mMultiTexCoordP2ui(texture,type,coords))
 void GL::MultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords) EC(mMultiTexCoordP2uiv(texture,type,coords))
 void GL::MultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords) EC(mMultiTexCoordP3ui(texture,type,coords))
 void GL::MultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords) EC(mMultiTexCoordP3uiv(texture,type,coords))
 void GL::MultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords) EC(mMultiTexCoordP4ui(texture,type,coords))
 void GL::MultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords) EC(mMultiTexCoordP4uiv(texture,type,coords))
 void GL::NormalP3ui(GLenum type, GLuint coords) EC(mNormalP3ui(type,coords))
 void GL::NormalP3uiv(GLenum type, const GLuint *coords) EC(mNormalP3uiv(type,coords))
 void GL::ColorP3ui(GLenum type, GLuint color) EC(mColorP3ui(type,color))
 void GL::ColorP3uiv(GLenum type, const GLuint *color) EC(mColorP3uiv(type,color))
 void GL::ColorP4ui(GLenum type, GLuint color) EC(mColorP4ui(type,color))
 void GL::ColorP4uiv(GLenum type, const GLuint *color) EC(mColorP4uiv(type,color))
 void GL::SecondaryColorP3ui(GLenum type, GLuint color) EC(mSecondaryColorP3ui(type,color))
 void GL::SecondaryColorP3uiv(GLenum type, const GLuint *color) EC(mSecondaryColorP3uiv(type,color))
 void GL::VertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) EC(mVertexAttribP1ui(index,type,normalized,value))
 void GL::VertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) EC(mVertexAttribP1uiv(index,type,normalized,value))
 void GL::VertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) EC(mVertexAttribP2ui(index,type,normalized,value))
 void GL::VertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) EC(mVertexAttribP2uiv(index,type,normalized,value))
 void GL::VertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) EC(mVertexAttribP3ui(index,type,normalized,value))
 void GL::VertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) EC(mVertexAttribP3uiv(index,type,normalized,value))
 void GL::VertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) EC(mVertexAttribP4ui(index,type,normalized,value))
 void GL::VertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) EC(mVertexAttribP4uiv(index,type,normalized,value))
 void GL::DrawArraysIndirect(GLenum mode, const GLvoid *indirect) EC(mDrawArraysIndirect(mode,indirect))
 void GL::DrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect) EC(mDrawElementsIndirect(mode,type,indirect))
 void GL::Uniform1d(GLint location, GLdouble x) EC(mUniform1d(location,x))
 void GL::Uniform2d(GLint location, GLdouble x, GLdouble y) EC(mUniform2d(location,x,y))
 void GL::Uniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) EC(mUniform3d(location,x,y,z))
 void GL::Uniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) EC(mUniform4d(location,x,y,z,w))
 void GL::Uniform1dv(GLint location, GLsizei count, const GLdouble *value) EC(mUniform1dv(location,count,value))
 void GL::Uniform2dv(GLint location, GLsizei count, const GLdouble *value) EC(mUniform2dv(location,count,value))
 void GL::Uniform3dv(GLint location, GLsizei count, const GLdouble *value) EC(mUniform3dv(location,count,value))
 void GL::Uniform4dv(GLint location, GLsizei count, const GLdouble *value) EC(mUniform4dv(location,count,value))
 void GL::UniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) EC(mUniformMatrix2dv(location,count,transpose,value))
 void GL::UniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) EC(mUniformMatrix3dv(location,count,transpose,value))
 void GL::UniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) EC(mUniformMatrix4dv(location,count,transpose,value))
 void GL::UniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) EC(mUniformMatrix2x3dv(location,count,transpose,value))
 void GL::UniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) EC(mUniformMatrix2x4dv(location,count,transpose,value))
 void GL::UniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) EC(mUniformMatrix3x2dv(location,count,transpose,value))
 void GL::UniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) EC(mUniformMatrix3x4dv(location,count,transpose,value))
 void GL::UniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) EC(mUniformMatrix4x2dv(location,count,transpose,value))
 void GL::UniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) EC(mUniformMatrix4x3dv(location,count,transpose,value))
 void GL::GetUniformdv(GLuint program, GLint location, GLdouble *params) EC(mGetUniformdv(program,location,params))
 GLint GL::GetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name) EC_RET(mGetSubroutineUniformLocation(program,shadertype,name))
 GLuint GL::GetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name) EC_RET(mGetSubroutineIndex(program,shadertype,name))
 void GL::GetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values) EC(mGetActiveSubroutineUniformiv(program,shadertype,index,pname,values))
 void GL::GetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) EC(mGetActiveSubroutineUniformName(program,shadertype,index,bufsize,length,name))
 void GL::GetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) EC(mGetActiveSubroutineName(program,shadertype,index,bufsize,length,name))
 void GL::UniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices) EC(mUniformSubroutinesuiv(shadertype,count,indices))
 void GL::GetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params) EC(mGetUniformSubroutineuiv(shadertype,location,params))
 void GL::GetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values) EC(mGetProgramStageiv(program,shadertype,pname,values))
 void GL::PatchParameteri(GLenum pname, GLint value) EC(mPatchParameteri(pname,value))
 void GL::PatchParameterfv(GLenum pname, const GLfloat *values) EC(mPatchParameterfv(pname,values))
 void GL::BindTransformFeedback(GLenum target, GLuint id) EC(mBindTransformFeedback(target,id))
 void GL::DeleteTransformFeedbacks(GLsizei n, const GLuint *ids) EC(mDeleteTransformFeedbacks(n,ids))
 void GL::GenTransformFeedbacks(GLsizei n, GLuint *ids) EC(mGenTransformFeedbacks(n,ids))
 GLboolean GL::IsTransformFeedback(GLuint id) EC_RET(mIsTransformFeedback(id))
 void GL::PauseTransformFeedback(void) EC(mPauseTransformFeedback())
 void GL::ResumeTransformFeedback(void) EC(mResumeTransformFeedback())
 void GL::DrawTransformFeedback(GLenum mode, GLuint id) EC(mDrawTransformFeedback(mode,id))
 void GL::DrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) EC(mDrawTransformFeedbackStream(mode,id,stream))
 void GL::BeginQueryIndexed(GLenum target, GLuint index, GLuint id) EC(mBeginQueryIndexed(target,index,id))
 void GL::EndQueryIndexed(GLenum target, GLuint index) EC(mEndQueryIndexed(target,index))
 void GL::GetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params) EC(mGetQueryIndexediv(target,index,pname,params))
 void GL::ReleaseShaderCompiler(void) EC(mReleaseShaderCompiler())
 void GL::ShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length) EC(mShaderBinary(count,shaders,binaryformat,binary,length))
 void GL::GetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision) EC(mGetShaderPrecisionFormat(shadertype,precisiontype,range,precision))
 void GL::DepthRangef(GLfloat n, GLfloat f) EC(mDepthRangef(n,f))
 void GL::ClearDepthf(GLfloat d) EC(mClearDepthf(d))
 void GL::GetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary) EC(mGetProgramBinary(program,bufSize,length,binaryFormat,binary))
 void GL::ProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length) EC(mProgramBinary(program,binaryFormat,binary,length))
 void GL::ProgramParameteri(GLuint program, GLenum pname, GLint value) EC(mProgramParameteri(program,pname,value))
 void GL::UseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) EC(mUseProgramStages(pipeline,stages,program))
 void GL::ActiveShaderProgram(GLuint pipeline, GLuint program) EC(mActiveShaderProgram(pipeline,program))
 GLuint GL::CreateShaderProgramv(GLenum type, GLsizei count, const GLchar* const *strings) EC_RET(mCreateShaderProgramv(type,count,strings))
 void GL::BindProgramPipeline(GLuint pipeline) EC(mBindProgramPipeline(pipeline))
 void GL::DeleteProgramPipelines(GLsizei n, const GLuint *pipelines) EC(mDeleteProgramPipelines(n,pipelines))
 void GL::GenProgramPipelines(GLsizei n, GLuint *pipelines) EC(mGenProgramPipelines(n,pipelines))
 GLboolean GL::IsProgramPipeline(GLuint pipeline) EC_RET(mIsProgramPipeline(pipeline))
 void GL::GetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params) EC(mGetProgramPipelineiv(pipeline,pname,params))
 void GL::ProgramUniform1i(GLuint program, GLint location, GLint v0) EC(mProgramUniform1i(program,location,v0))
 void GL::ProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value) EC(mProgramUniform1iv(program,location,count,value))
 void GL::ProgramUniform1f(GLuint program, GLint location, GLfloat v0) EC(mProgramUniform1f(program,location,v0))
 void GL::ProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) EC(mProgramUniform1fv(program,location,count,value))
 void GL::ProgramUniform1d(GLuint program, GLint location, GLdouble v0) EC(mProgramUniform1d(program,location,v0))
 void GL::ProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) EC(mProgramUniform1dv(program,location,count,value))
 void GL::ProgramUniform1ui(GLuint program, GLint location, GLuint v0) EC(mProgramUniform1ui(program,location,v0))
 void GL::ProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) EC(mProgramUniform1uiv(program,location,count,value))
 void GL::ProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1) EC(mProgramUniform2i(program,location,v0,v1))
 void GL::ProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value) EC(mProgramUniform2iv(program,location,count,value))
 void GL::ProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) EC(mProgramUniform2f(program,location,v0,v1))
 void GL::ProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) EC(mProgramUniform2fv(program,location,count,value))
 void GL::ProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1) EC(mProgramUniform2d(program,location,v0,v1))
 void GL::ProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) EC(mProgramUniform2dv(program,location,count,value))
 void GL::ProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) EC(mProgramUniform2ui(program,location,v0,v1))
 void GL::ProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) EC(mProgramUniform2uiv(program,location,count,value))
 void GL::ProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) EC(mProgramUniform3i(program,location,v0,v1,v2))
 void GL::ProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value) EC(mProgramUniform3iv(program,location,count,value))
 void GL::ProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) EC(mProgramUniform3f(program,location,v0,v1,v2))
 void GL::ProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) EC(mProgramUniform3fv(program,location,count,value))
 void GL::ProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) EC(mProgramUniform3d(program,location,v0,v1,v2))
 void GL::ProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) EC(mProgramUniform3dv(program,location,count,value))
 void GL::ProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) EC(mProgramUniform3ui(program,location,v0,v1,v2))
 void GL::ProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) EC(mProgramUniform3uiv(program,location,count,value))
 void GL::ProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) EC(mProgramUniform4i(program,location,v0,v1,v2,v3))
 void GL::ProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value) EC(mProgramUniform4iv(program,location,count,value))
 void GL::ProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) EC(mProgramUniform4f(program,location,v0,v1,v2,v3))
 void GL::ProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) EC(mProgramUniform4fv(program,location,count,value))
 void GL::ProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) EC(mProgramUniform4d(program,location,v0,v1,v2,v3))
 void GL::ProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) EC(mProgramUniform4dv(program,location,count,value))
 void GL::ProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) EC(mProgramUniform4ui(program,location,v0,v1,v2,v3))
 void GL::ProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) EC(mProgramUniform4uiv(program,location,count,value))
 void GL::ProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) EC(mProgramUniformMatrix2fv(program,location,count,transpose,value))
 void GL::ProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) EC(mProgramUniformMatrix3fv(program,location,count,transpose,value))
 void GL::ProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) EC(mProgramUniformMatrix4fv(program,location,count,transpose,value))
 void GL::ProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) EC(mProgramUniformMatrix2dv(program,location,count,transpose,value))
 void GL::ProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) EC(mProgramUniformMatrix3dv(program,location,count,transpose,value))
 void GL::ProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) EC(mProgramUniformMatrix4dv(program,location,count,transpose,value))
 void GL::ProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) EC(mProgramUniformMatrix2x3fv(program,location,count,transpose,value))
 void GL::ProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) EC(mProgramUniformMatrix3x2fv(program,location,count,transpose,value))
 void GL::ProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) EC(mProgramUniformMatrix2x4fv(program,location,count,transpose,value))
 void GL::ProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) EC(mProgramUniformMatrix4x2fv(program,location,count,transpose,value))
 void GL::ProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) EC(mProgramUniformMatrix3x4fv(program,location,count,transpose,value))
 void GL::ProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) EC(mProgramUniformMatrix4x3fv(program,location,count,transpose,value))
 void GL::ProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) EC(mProgramUniformMatrix2x3dv(program,location,count,transpose,value))
 void GL::ProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) EC(mProgramUniformMatrix3x2dv(program,location,count,transpose,value))
 void GL::ProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) EC(mProgramUniformMatrix2x4dv(program,location,count,transpose,value))
 void GL::ProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) EC(mProgramUniformMatrix4x2dv(program,location,count,transpose,value))
 void GL::ProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) EC(mProgramUniformMatrix3x4dv(program,location,count,transpose,value))
 void GL::ProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) EC(mProgramUniformMatrix4x3dv(program,location,count,transpose,value))
 void GL::ValidateProgramPipeline(GLuint pipeline) EC(mValidateProgramPipeline(pipeline))
 void GL::GetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) EC(mGetProgramPipelineInfoLog(pipeline,bufSize,length,infoLog))
 void GL::VertexAttribL1d(GLuint index, GLdouble x) EC(mVertexAttribL1d(index,x))
 void GL::VertexAttribL2d(GLuint index, GLdouble x, GLdouble y) EC(mVertexAttribL2d(index,x,y))
 void GL::VertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) EC(mVertexAttribL3d(index,x,y,z))
 void GL::VertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) EC(mVertexAttribL4d(index,x,y,z,w))
 void GL::VertexAttribL1dv(GLuint index, const GLdouble *v) EC(mVertexAttribL1dv(index,v))
 void GL::VertexAttribL2dv(GLuint index, const GLdouble *v) EC(mVertexAttribL2dv(index,v))
 void GL::VertexAttribL3dv(GLuint index, const GLdouble *v) EC(mVertexAttribL3dv(index,v))
 void GL::VertexAttribL4dv(GLuint index, const GLdouble *v) EC(mVertexAttribL4dv(index,v))
 void GL::VertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) EC(mVertexAttribLPointer(index,size,type,stride,pointer))
 void GL::GetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params) EC(mGetVertexAttribLdv(index,pname,params))
 void GL::ViewportArrayv(GLuint first, GLsizei count, const GLfloat *v) EC(mViewportArrayv(first,count,v))
 void GL::ViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) EC(mViewportIndexedf(index,x,y,w,h))
 void GL::ViewportIndexedfv(GLuint index, const GLfloat *v) EC(mViewportIndexedfv(index,v))
 void GL::ScissorArrayv(GLuint first, GLsizei count, const GLint *v) EC(mScissorArrayv(first,count,v))
 void GL::ScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) EC(mScissorIndexed(index,left,bottom,width,height))
 void GL::ScissorIndexedv(GLuint index, const GLint *v) EC(mScissorIndexedv(index,v))
 void GL::DepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v) EC(mDepthRangeArrayv(first,count,v))
 void GL::DepthRangeIndexed(GLuint index, GLdouble n, GLdouble f) EC(mDepthRangeIndexed(index,n,f))
 void GL::GetFloati_v(GLenum target, GLuint index, GLfloat *data) EC(mGetFloati_v(target,index,data))
 void GL::GetDoublei_v(GLenum target, GLuint index, GLdouble *data) EC(mGetDoublei_v(target,index,data))
 GLsync GL::CreateSyncFromCLeventARB(struct _cl_context * context, struct _cl_event * event, GLbitfield flags) EC_RET(mCreateSyncFromCLeventARB(context,event,flags))
 void GL::DebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) EC(mDebugMessageControlARB(source,type,severity,count,ids,enabled))
 void GL::DebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) EC(mDebugMessageInsertARB(source,type,id,severity,length,buf))
 void GL::DebugMessageCallbackARB(GLDEBUGPROCARB callback, const GLvoid *userParam) EC(mDebugMessageCallbackARB(callback,userParam))
 GLuint GL::GetDebugMessageLogARB(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) EC_RET(mGetDebugMessageLogARB(count,bufsize,sources,types,ids,severities,lengths,messageLog))
 GLenum GL::GetGraphicsResetStatusARB(void) EC_RET(mGetGraphicsResetStatusARB())
 void GL::GetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img) EC(mGetnTexImageARB(target,level,format,type,bufSize,img))
 void GL::ReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data) EC(mReadnPixelsARB(x,y,width,height,format,type,bufSize,data))
 void GL::GetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img) EC(mGetnCompressedTexImageARB(target,lod,bufSize,img))
 void GL::GetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params) EC(mGetnUniformfvARB(program,location,bufSize,params))
 void GL::GetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params) EC(mGetnUniformivARB(program,location,bufSize,params))
 void GL::GetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params) EC(mGetnUniformuivARB(program,location,bufSize,params))
 void GL::GetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params) EC(mGetnUniformdvARB(program,location,bufSize,params))
 void GL::DrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) EC(mDrawArraysInstancedBaseInstance(mode,first,count,instancecount,baseinstance))
 void GL::DrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance) EC(mDrawElementsInstancedBaseInstance(mode,count,type,indices,instancecount,baseinstance))
 void GL::DrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) EC(mDrawElementsInstancedBaseVertexBaseInstance(mode,count,type,indices,instancecount,basevertex,baseinstance))
 void GL::DrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount) EC(mDrawTransformFeedbackInstanced(mode,id,instancecount))
 void GL::DrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) EC(mDrawTransformFeedbackStreamInstanced(mode,id,stream,instancecount))
 void GL::GetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params) EC(mGetInternalformativ(target,internalformat,pname,bufSize,params))
 void GL::GetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params) EC(mGetActiveAtomicCounterBufferiv(program,bufferIndex,pname,params))
 void GL::BindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) EC(mBindImageTexture(unit,texture,level,layered,layer,access,format))
 void GL::MemoryBarrier(GLbitfield barriers) EC(mMemoryBarrier(barriers))
 void GL::TexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) EC(mTexStorage1D(target,levels,internalformat,width))
 void GL::TexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) EC(mTexStorage2D(target,levels,internalformat,width,height))
 void GL::TexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) EC(mTexStorage3D(target,levels,internalformat,width,height,depth))
 void GL::TextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) EC(mTextureStorage1DEXT(texture,target,levels,internalformat,width))
 void GL::TextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) EC(mTextureStorage2DEXT(texture,target,levels,internalformat,width,height))
 void GL::TextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) EC(mTextureStorage3DEXT(texture,target,levels,internalformat,width,height,depth))
 void GL::DebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) EC(mDebugMessageControl(source,type,severity,count,ids,enabled))
 void GL::DebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) EC(mDebugMessageInsert(source,type,id,severity,length,buf))
 void GL::DebugMessageCallback(GLDEBUGPROC callback, const void *userParam) EC(mDebugMessageCallback(callback,userParam))
 GLuint GL::GetDebugMessageLog(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) EC_RET(mGetDebugMessageLog(count,bufsize,sources,types,ids,severities,lengths,messageLog))
 void GL::PushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message) EC(mPushDebugGroup(source,id,length,message))
 void GL::PopDebugGroup(void) EC(mPopDebugGroup())
 void GL::ObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label) EC(mObjectLabel(identifier,name,length,label))
 void GL::GetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) EC(mGetObjectLabel(identifier,name,bufSize,length,label))
 void GL::ObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label) EC(mObjectPtrLabel(ptr,length,label))
 void GL::GetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label) EC(mGetObjectPtrLabel(ptr,bufSize,length,label))
 void GL::ClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data) EC(mClearBufferData(target,internalformat,format,type,data))
 void GL::ClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) EC(mClearBufferSubData(target,internalformat,offset,size,format,type,data))
 void GL::ClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data) EC(mClearNamedBufferDataEXT(buffer,internalformat,format,type,data))
 void GL::ClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, GLsizeiptr offset, GLsizeiptr size, const void *data) EC(mClearNamedBufferSubDataEXT(buffer,internalformat,format,type,offset,size,data))
 void GL::DispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) EC(mDispatchCompute(num_groups_x,num_groups_y,num_groups_z))
 void GL::DispatchComputeIndirect(GLintptr indirect) EC(mDispatchComputeIndirect(indirect))
 void GL::CopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) EC(mCopyImageSubData(srcName,srcTarget,srcLevel,srcX,srcY,srcZ,dstName,dstTarget,dstLevel,dstX,dstY,dstZ,srcWidth,srcHeight,srcDepth))
 void GL::TextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) EC(mTextureView(texture,target,origtexture,internalformat,minlevel,numlevels,minlayer,numlayers))
 void GL::BindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) EC(mBindVertexBuffer(bindingindex,buffer,offset,stride))
 void GL::VertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) EC(mVertexAttribFormat(attribindex,size,type,normalized,relativeoffset))
 void GL::VertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) EC(mVertexAttribIFormat(attribindex,size,type,relativeoffset))
 void GL::VertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) EC(mVertexAttribLFormat(attribindex,size,type,relativeoffset))
 void GL::VertexAttribBinding(GLuint attribindex, GLuint bindingindex) EC(mVertexAttribBinding(attribindex,bindingindex))
 void GL::VertexBindingDivisor(GLuint bindingindex, GLuint divisor) EC(mVertexBindingDivisor(bindingindex,divisor))
 void GL::VertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) EC(mVertexArrayBindVertexBufferEXT(vaobj,bindingindex,buffer,offset,stride))
 void GL::VertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) EC(mVertexArrayVertexAttribFormatEXT(vaobj,attribindex,size,type,normalized,relativeoffset))
 void GL::VertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) EC(mVertexArrayVertexAttribIFormatEXT(vaobj,attribindex,size,type,relativeoffset))
 void GL::VertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) EC(mVertexArrayVertexAttribLFormatEXT(vaobj,attribindex,size,type,relativeoffset))
 void GL::VertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex) EC(mVertexArrayVertexAttribBindingEXT(vaobj,attribindex,bindingindex))
 void GL::VertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor) EC(mVertexArrayVertexBindingDivisorEXT(vaobj,bindingindex,divisor))
 void GL::FramebufferParameteri(GLenum target, GLenum pname, GLint param) EC(mFramebufferParameteri(target,pname,param))
 void GL::GetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params) EC(mGetFramebufferParameteriv(target,pname,params))
 void GL::NamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param) EC(mNamedFramebufferParameteriEXT(framebuffer,pname,param))
 void GL::GetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params) EC(mGetNamedFramebufferParameterivEXT(framebuffer,pname,params))
 void GL::GetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params) EC(mGetInternalformati64v(target,internalformat,pname,bufSize,params))
 void GL::InvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) EC(mInvalidateTexSubImage(texture,level,xoffset,yoffset,zoffset,width,height,depth))
 void GL::InvalidateTexImage(GLuint texture, GLint level) EC(mInvalidateTexImage(texture,level))
 void GL::InvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) EC(mInvalidateBufferSubData(buffer,offset,length))
 void GL::InvalidateBufferData(GLuint buffer) EC(mInvalidateBufferData(buffer))
 void GL::InvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments) EC(mInvalidateFramebuffer(target,numAttachments,attachments))
 void GL::InvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) EC(mInvalidateSubFramebuffer(target,numAttachments,attachments,x,y,width,height))
 void GL::MultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride) EC(mMultiDrawArraysIndirect(mode,indirect,drawcount,stride))
 void GL::MultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride) EC(mMultiDrawElementsIndirect(mode,type,indirect,drawcount,stride))
 void GL::GetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params) EC(mGetProgramInterfaceiv(program,programInterface,pname,params))
 GLuint GL::GetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name) EC_RET(mGetProgramResourceIndex(program,programInterface,name))
 void GL::GetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) EC(mGetProgramResourceName(program,programInterface,index,bufSize,length,name))
 void GL::GetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params) EC(mGetProgramResourceiv(program,programInterface,index,propCount,props,bufSize,length,params))
 GLint GL::GetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name) EC_RET(mGetProgramResourceLocation(program,programInterface,name))
 GLint GL::GetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name) EC_RET(mGetProgramResourceLocationIndex(program,programInterface,name))
 void GL::ShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) EC(mShaderStorageBlockBinding(program,storageBlockIndex,storageBlockBinding))
 void GL::TexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) EC(mTexBufferRange(target,internalformat,buffer,offset,size))
 void GL::TextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) EC(mTextureBufferRangeEXT(texture,target,internalformat,buffer,offset,size))
 void GL::TexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) EC(mTexStorage2DMultisample(target,samples,internalformat,width,height,fixedsamplelocations))
 void GL::TexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) EC(mTexStorage3DMultisample(target,samples,internalformat,width,height,depth,fixedsamplelocations))
 void GL::TextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) EC(mTextureStorage2DMultisampleEXT(texture,target,samples,internalformat,width,height,fixedsamplelocations))
 void GL::TextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) EC(mTextureStorage3DMultisampleEXT(texture,target,samples,internalformat,width,height,depth,fixedsamplelocations))
