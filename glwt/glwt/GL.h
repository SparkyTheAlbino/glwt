/** Auto generated by the gl3w_gen.py script **/
//glcoreab.h defines gl types and the gl header
#ifndef __gltypes_h_
#define __gltypes_h_
#endif

#ifndef __gl_h_
#define __gl_h_
#endif

#ifndef __gl3w_h_
#define __gl3w_h_

#include "glcorearb.h"

#ifndef __gl_h_
#define __gl_h_
#endif

struct Version 
{
	int major, minor;
};

class GL
{
public:
/* gl3w api */
	static int Init();
	static int IsSupported(int major, int minor);
	static void* GetProcAddress(const char *proc);
	static const Version& GetVersion();

/* OpenGL functions */
	static void CullFace(GLenum mode);
	static void FrontFace(GLenum mode);
	static void Hint(GLenum target, GLenum mode);
	static void LineWidth(GLfloat width);
	static void PointSize(GLfloat size);
	static void PolygonMode(GLenum face, GLenum mode);
	static void Scissor(GLint x, GLint y, GLsizei width, GLsizei height);
	static void TexParameterf(GLenum target, GLenum pname, GLfloat param);
	static void TexParameterfv(GLenum target, GLenum pname, const GLfloat *params);
	static void TexParameteri(GLenum target, GLenum pname, GLint param);
	static void TexParameteriv(GLenum target, GLenum pname, const GLint *params);
	static void TexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
	static void TexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
	static void DrawBuffer(GLenum mode);
	static void Clear(GLbitfield mask);
	static void ClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	static void ClearStencil(GLint s);
	static void ClearDepth(GLdouble depth);
	static void StencilMask(GLuint mask);
	static void ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
	static void DepthMask(GLboolean flag);
	static void Disable(GLenum cap);
	static void Enable(GLenum cap);
	static void Finish(void);
	static void Flush(void);
	static void BlendFunc(GLenum sfactor, GLenum dfactor);
	static void LogicOp(GLenum opcode);
	static void StencilFunc(GLenum func, GLint ref, GLuint mask);
	static void StencilOp(GLenum fail, GLenum zfail, GLenum zpass);
	static void DepthFunc(GLenum func);
	static void PixelStoref(GLenum pname, GLfloat param);
	static void PixelStorei(GLenum pname, GLint param);
	static void ReadBuffer(GLenum mode);
	static void ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
	static void GetBooleanv(GLenum pname, GLboolean *params);
	static void GetDoublev(GLenum pname, GLdouble *params);
	static GLenum GetError(void);
	static void GetFloatv(GLenum pname, GLfloat *params);
	static void GetIntegerv(GLenum pname, GLint *params);
	static const GLubyte * GetString(GLenum name);
	static void GetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
	static void GetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
	static void GetTexParameteriv(GLenum target, GLenum pname, GLint *params);
	static void GetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params);
	static void GetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params);
	static GLboolean IsEnabled(GLenum cap);
	static void DepthRange(GLdouble near, GLdouble far);
	static void Viewport(GLint x, GLint y, GLsizei width, GLsizei height);
	static void DrawArrays(GLenum mode, GLint first, GLsizei count);
	static void DrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
	static void GetPointerv(GLenum pname, GLvoid* *params);
	static void PolygonOffset(GLfloat factor, GLfloat units);
	static void CopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
	static void CopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
	static void CopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	static void CopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	static void TexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
	static void TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
	static void BindTexture(GLenum target, GLuint texture);
	static void DeleteTextures(GLsizei n, const GLuint *textures);
	static void GenTextures(GLsizei n, GLuint *textures);
	static GLboolean IsTexture(GLuint texture);
	static void BlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	static void BlendEquation(GLenum mode);
	static void DrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
	static void TexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
	static void TexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
	static void CopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	static void ActiveTexture(GLenum texture);
	static void SampleCoverage(GLfloat value, GLboolean invert);
	static void CompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
	static void CompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
	static void CompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
	static void CompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
	static void CompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
	static void CompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
	static void GetCompressedTexImage(GLenum target, GLint level, GLvoid *img);
	static void BlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
	static void MultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
	static void MultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei drawcount);
	static void PointParameterf(GLenum pname, GLfloat param);
	static void PointParameterfv(GLenum pname, const GLfloat *params);
	static void PointParameteri(GLenum pname, GLint param);
	static void PointParameteriv(GLenum pname, const GLint *params);
	static void GenQueries(GLsizei n, GLuint *ids);
	static void DeleteQueries(GLsizei n, const GLuint *ids);
	static GLboolean IsQuery(GLuint id);
	static void BeginQuery(GLenum target, GLuint id);
	static void EndQuery(GLenum target);
	static void GetQueryiv(GLenum target, GLenum pname, GLint *params);
	static void GetQueryObjectiv(GLuint id, GLenum pname, GLint *params);
	static void GetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params);
	static void BindBuffer(GLenum target, GLuint buffer);
	static void DeleteBuffers(GLsizei n, const GLuint *buffers);
	static void GenBuffers(GLsizei n, GLuint *buffers);
	static GLboolean IsBuffer(GLuint buffer);
	static void BufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
	static void BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
	static void GetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);
	static GLvoid* MapBuffer(GLenum target, GLenum access);
	static GLboolean UnmapBuffer(GLenum target);
	static void GetBufferParameteriv(GLenum target, GLenum pname, GLint *params);
	static void GetBufferPointerv(GLenum target, GLenum pname, GLvoid* *params);
	static void BlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
	static void DrawBuffers(GLsizei n, const GLenum *bufs);
	static void StencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
	static void StencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
	static void StencilMaskSeparate(GLenum face, GLuint mask);
	static void AttachShader(GLuint program, GLuint shader);
	static void BindAttribLocation(GLuint program, GLuint index, const GLchar *name);
	static void CompileShader(GLuint shader);
	static GLuint CreateProgram(void);
	static GLuint CreateShader(GLenum type);
	static void DeleteProgram(GLuint program);
	static void DeleteShader(GLuint shader);
	static void DetachShader(GLuint program, GLuint shader);
	static void DisableVertexAttribArray(GLuint index);
	static void EnableVertexAttribArray(GLuint index);
	static void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
	static void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
	static void GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);
	static GLint GetAttribLocation(GLuint program, const GLchar *name);
	static void GetProgramiv(GLuint program, GLenum pname, GLint *params);
	static void GetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
	static void GetShaderiv(GLuint shader, GLenum pname, GLint *params);
	static void GetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
	static void GetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
	static GLint GetUniformLocation(GLuint program, const GLchar *name);
	static void GetUniformfv(GLuint program, GLint location, GLfloat *params);
	static void GetUniformiv(GLuint program, GLint location, GLint *params);
	static void GetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params);
	static void GetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params);
	static void GetVertexAttribiv(GLuint index, GLenum pname, GLint *params);
	static void GetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid* *pointer);
	static GLboolean IsProgram(GLuint program);
	static GLboolean IsShader(GLuint shader);
	static void LinkProgram(GLuint program);
	static void ShaderSource(GLuint shader, GLsizei count, const GLchar* const *string, const GLint *length);
	static void UseProgram(GLuint program);
	static void Uniform1f(GLint location, GLfloat v0);
	static void Uniform2f(GLint location, GLfloat v0, GLfloat v1);
	static void Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	static void Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	static void Uniform1i(GLint location, GLint v0);
	static void Uniform2i(GLint location, GLint v0, GLint v1);
	static void Uniform3i(GLint location, GLint v0, GLint v1, GLint v2);
	static void Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	static void Uniform1fv(GLint location, GLsizei count, const GLfloat *value);
	static void Uniform2fv(GLint location, GLsizei count, const GLfloat *value);
	static void Uniform3fv(GLint location, GLsizei count, const GLfloat *value);
	static void Uniform4fv(GLint location, GLsizei count, const GLfloat *value);
	static void Uniform1iv(GLint location, GLsizei count, const GLint *value);
	static void Uniform2iv(GLint location, GLsizei count, const GLint *value);
	static void Uniform3iv(GLint location, GLsizei count, const GLint *value);
	static void Uniform4iv(GLint location, GLsizei count, const GLint *value);
	static void UniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	static void UniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	static void UniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	static void ValidateProgram(GLuint program);
	static void VertexAttrib1d(GLuint index, GLdouble x);
	static void VertexAttrib1dv(GLuint index, const GLdouble *v);
	static void VertexAttrib1f(GLuint index, GLfloat x);
	static void VertexAttrib1fv(GLuint index, const GLfloat *v);
	static void VertexAttrib1s(GLuint index, GLshort x);
	static void VertexAttrib1sv(GLuint index, const GLshort *v);
	static void VertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
	static void VertexAttrib2dv(GLuint index, const GLdouble *v);
	static void VertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
	static void VertexAttrib2fv(GLuint index, const GLfloat *v);
	static void VertexAttrib2s(GLuint index, GLshort x, GLshort y);
	static void VertexAttrib2sv(GLuint index, const GLshort *v);
	static void VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
	static void VertexAttrib3dv(GLuint index, const GLdouble *v);
	static void VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
	static void VertexAttrib3fv(GLuint index, const GLfloat *v);
	static void VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
	static void VertexAttrib3sv(GLuint index, const GLshort *v);
	static void VertexAttrib4Nbv(GLuint index, const GLbyte *v);
	static void VertexAttrib4Niv(GLuint index, const GLint *v);
	static void VertexAttrib4Nsv(GLuint index, const GLshort *v);
	static void VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
	static void VertexAttrib4Nubv(GLuint index, const GLubyte *v);
	static void VertexAttrib4Nuiv(GLuint index, const GLuint *v);
	static void VertexAttrib4Nusv(GLuint index, const GLushort *v);
	static void VertexAttrib4bv(GLuint index, const GLbyte *v);
	static void VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	static void VertexAttrib4dv(GLuint index, const GLdouble *v);
	static void VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	static void VertexAttrib4fv(GLuint index, const GLfloat *v);
	static void VertexAttrib4iv(GLuint index, const GLint *v);
	static void VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
	static void VertexAttrib4sv(GLuint index, const GLshort *v);
	static void VertexAttrib4ubv(GLuint index, const GLubyte *v);
	static void VertexAttrib4uiv(GLuint index, const GLuint *v);
	static void VertexAttrib4usv(GLuint index, const GLushort *v);
	static void VertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
	static void UniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	static void UniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	static void UniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	static void UniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	static void UniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	static void UniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	static void ColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
	static void GetBooleani_v(GLenum target, GLuint index, GLboolean *data);
	static void GetIntegeri_v(GLenum target, GLuint index, GLint *data);
	static void Enablei(GLenum target, GLuint index);
	static void Disablei(GLenum target, GLuint index);
	static GLboolean IsEnabledi(GLenum target, GLuint index);
	static void BeginTransformFeedback(GLenum primitiveMode);
	static void EndTransformFeedback(void);
	static void BindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	static void BindBufferBase(GLenum target, GLuint index, GLuint buffer);
	static void TransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar* const *varyings, GLenum bufferMode);
	static void GetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
	static void ClampColor(GLenum target, GLenum clamp);
	static void BeginConditionalRender(GLuint id, GLenum mode);
	static void EndConditionalRender(void);
	static void VertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
	static void GetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);
	static void GetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
	static void VertexAttribI1i(GLuint index, GLint x);
	static void VertexAttribI2i(GLuint index, GLint x, GLint y);
	static void VertexAttribI3i(GLuint index, GLint x, GLint y, GLint z);
	static void VertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
	static void VertexAttribI1ui(GLuint index, GLuint x);
	static void VertexAttribI2ui(GLuint index, GLuint x, GLuint y);
	static void VertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z);
	static void VertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
	static void VertexAttribI1iv(GLuint index, const GLint *v);
	static void VertexAttribI2iv(GLuint index, const GLint *v);
	static void VertexAttribI3iv(GLuint index, const GLint *v);
	static void VertexAttribI4iv(GLuint index, const GLint *v);
	static void VertexAttribI1uiv(GLuint index, const GLuint *v);
	static void VertexAttribI2uiv(GLuint index, const GLuint *v);
	static void VertexAttribI3uiv(GLuint index, const GLuint *v);
	static void VertexAttribI4uiv(GLuint index, const GLuint *v);
	static void VertexAttribI4bv(GLuint index, const GLbyte *v);
	static void VertexAttribI4sv(GLuint index, const GLshort *v);
	static void VertexAttribI4ubv(GLuint index, const GLubyte *v);
	static void VertexAttribI4usv(GLuint index, const GLushort *v);
	static void GetUniformuiv(GLuint program, GLint location, GLuint *params);
	static void BindFragDataLocation(GLuint program, GLuint color, const GLchar *name);
	static GLint GetFragDataLocation(GLuint program, const GLchar *name);
	static void Uniform1ui(GLint location, GLuint v0);
	static void Uniform2ui(GLint location, GLuint v0, GLuint v1);
	static void Uniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
	static void Uniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	static void Uniform1uiv(GLint location, GLsizei count, const GLuint *value);
	static void Uniform2uiv(GLint location, GLsizei count, const GLuint *value);
	static void Uniform3uiv(GLint location, GLsizei count, const GLuint *value);
	static void Uniform4uiv(GLint location, GLsizei count, const GLuint *value);
	static void TexParameterIiv(GLenum target, GLenum pname, const GLint *params);
	static void TexParameterIuiv(GLenum target, GLenum pname, const GLuint *params);
	static void GetTexParameterIiv(GLenum target, GLenum pname, GLint *params);
	static void GetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params);
	static void ClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value);
	static void ClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value);
	static void ClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value);
	static void ClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
	static const GLubyte * GetStringi(GLenum name, GLuint index);
	static void DrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
	static void DrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instancecount);
	static void TexBuffer(GLenum target, GLenum internalformat, GLuint buffer);
	static void PrimitiveRestartIndex(GLuint index);
	static void GetInteger64i_v(GLenum target, GLuint index, GLint64 *data);
	static void GetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params);
	static void FramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
	static void VertexAttribDivisor(GLuint index, GLuint divisor);
	static void MinSampleShading(GLfloat value);
	static void BlendEquationi(GLuint buf, GLenum mode);
	static void BlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
	static void BlendFunci(GLuint buf, GLenum src, GLenum dst);
	static void BlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
	static GLboolean IsRenderbuffer(GLuint renderbuffer);
	static void BindRenderbuffer(GLenum target, GLuint renderbuffer);
	static void DeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
	static void GenRenderbuffers(GLsizei n, GLuint *renderbuffers);
	static void RenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
	static void GetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params);
	static GLboolean IsFramebuffer(GLuint framebuffer);
	static void BindFramebuffer(GLenum target, GLuint framebuffer);
	static void DeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
	static void GenFramebuffers(GLsizei n, GLuint *framebuffers);
	static GLenum CheckFramebufferStatus(GLenum target);
	static void FramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	static void FramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	static void FramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
	static void FramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	static void GetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params);
	static void GenerateMipmap(GLenum target);
	static void BlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	static void RenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	static void FramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
	static GLvoid* MapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
	static void FlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
	static void BindVertexArray(GLuint array);
	static void DeleteVertexArrays(GLsizei n, const GLuint *arrays);
	static void GenVertexArrays(GLsizei n, GLuint *arrays);
	static GLboolean IsVertexArray(GLuint array);
	static void GetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
	static void GetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
	static void GetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
	static GLuint GetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName);
	static void GetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
	static void GetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
	static void UniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
	static void CopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
	static void DrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
	static void DrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
	static void DrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instancecount, GLint basevertex);
	static void MultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei drawcount, const GLint *basevertex);
	static void ProvokingVertex(GLenum mode);
	static GLsync FenceSync(GLenum condition, GLbitfield flags);
	static GLboolean IsSync(GLsync sync);
	static void DeleteSync(GLsync sync);
	static GLenum ClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
	static void WaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
	static void GetInteger64v(GLenum pname, GLint64 *params);
	static void GetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
	static void TexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	static void TexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	static void GetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
	static void SampleMaski(GLuint index, GLbitfield mask);
	static void BlendEquationiARB(GLuint buf, GLenum mode);
	static void BlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
	static void BlendFunciARB(GLuint buf, GLenum src, GLenum dst);
	static void BlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
	static void MinSampleShadingARB(GLfloat value);
	static void NamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
	static void DeleteNamedStringARB(GLint namelen, const GLchar *name);
	static void CompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar* *path, const GLint *length);
	static GLboolean IsNamedStringARB(GLint namelen, const GLchar *name);
	static void GetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
	static void GetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params);
	static void BindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
	static GLint GetFragDataIndex(GLuint program, const GLchar *name);
	static void GenSamplers(GLsizei count, GLuint *samplers);
	static void DeleteSamplers(GLsizei count, const GLuint *samplers);
	static GLboolean IsSampler(GLuint sampler);
	static void BindSampler(GLuint unit, GLuint sampler);
	static void SamplerParameteri(GLuint sampler, GLenum pname, GLint param);
	static void SamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param);
	static void SamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
	static void SamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param);
	static void SamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param);
	static void SamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param);
	static void GetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params);
	static void GetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params);
	static void GetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params);
	static void GetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params);
	static void QueryCounter(GLuint id, GLenum target);
	static void GetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params);
	static void GetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params);
	static void VertexP2ui(GLenum type, GLuint value);
	static void VertexP2uiv(GLenum type, const GLuint *value);
	static void VertexP3ui(GLenum type, GLuint value);
	static void VertexP3uiv(GLenum type, const GLuint *value);
	static void VertexP4ui(GLenum type, GLuint value);
	static void VertexP4uiv(GLenum type, const GLuint *value);
	static void TexCoordP1ui(GLenum type, GLuint coords);
	static void TexCoordP1uiv(GLenum type, const GLuint *coords);
	static void TexCoordP2ui(GLenum type, GLuint coords);
	static void TexCoordP2uiv(GLenum type, const GLuint *coords);
	static void TexCoordP3ui(GLenum type, GLuint coords);
	static void TexCoordP3uiv(GLenum type, const GLuint *coords);
	static void TexCoordP4ui(GLenum type, GLuint coords);
	static void TexCoordP4uiv(GLenum type, const GLuint *coords);
	static void MultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords);
	static void MultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords);
	static void MultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords);
	static void MultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords);
	static void MultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords);
	static void MultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords);
	static void MultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords);
	static void MultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords);
	static void NormalP3ui(GLenum type, GLuint coords);
	static void NormalP3uiv(GLenum type, const GLuint *coords);
	static void ColorP3ui(GLenum type, GLuint color);
	static void ColorP3uiv(GLenum type, const GLuint *color);
	static void ColorP4ui(GLenum type, GLuint color);
	static void ColorP4uiv(GLenum type, const GLuint *color);
	static void SecondaryColorP3ui(GLenum type, GLuint color);
	static void SecondaryColorP3uiv(GLenum type, const GLuint *color);
	static void VertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	static void VertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
	static void VertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	static void VertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
	static void VertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	static void VertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
	static void VertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	static void VertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
	static void DrawArraysIndirect(GLenum mode, const GLvoid *indirect);
	static void DrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect);
	static void Uniform1d(GLint location, GLdouble x);
	static void Uniform2d(GLint location, GLdouble x, GLdouble y);
	static void Uniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z);
	static void Uniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	static void Uniform1dv(GLint location, GLsizei count, const GLdouble *value);
	static void Uniform2dv(GLint location, GLsizei count, const GLdouble *value);
	static void Uniform3dv(GLint location, GLsizei count, const GLdouble *value);
	static void Uniform4dv(GLint location, GLsizei count, const GLdouble *value);
	static void UniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	static void UniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	static void UniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	static void UniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	static void UniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	static void UniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	static void UniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	static void UniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	static void UniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	static void GetUniformdv(GLuint program, GLint location, GLdouble *params);
	static GLint GetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name);
	static GLuint GetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name);
	static void GetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
	static void GetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
	static void GetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
	static void UniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices);
	static void GetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params);
	static void GetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
	static void PatchParameteri(GLenum pname, GLint value);
	static void PatchParameterfv(GLenum pname, const GLfloat *values);
	static void BindTransformFeedback(GLenum target, GLuint id);
	static void DeleteTransformFeedbacks(GLsizei n, const GLuint *ids);
	static void GenTransformFeedbacks(GLsizei n, GLuint *ids);
	static GLboolean IsTransformFeedback(GLuint id);
	static void PauseTransformFeedback(void);
	static void ResumeTransformFeedback(void);
	static void DrawTransformFeedback(GLenum mode, GLuint id);
	static void DrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream);
	static void BeginQueryIndexed(GLenum target, GLuint index, GLuint id);
	static void EndQueryIndexed(GLenum target, GLuint index);
	static void GetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params);
	static void ReleaseShaderCompiler(void);
	static void ShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length);
	static void GetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
	static void DepthRangef(GLfloat n, GLfloat f);
	static void ClearDepthf(GLfloat d);
	static void GetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);
	static void ProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length);
	static void ProgramParameteri(GLuint program, GLenum pname, GLint value);
	static void UseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program);
	static void ActiveShaderProgram(GLuint pipeline, GLuint program);
	static GLuint CreateShaderProgramv(GLenum type, GLsizei count, const GLchar* const *strings);
	static void BindProgramPipeline(GLuint pipeline);
	static void DeleteProgramPipelines(GLsizei n, const GLuint *pipelines);
	static void GenProgramPipelines(GLsizei n, GLuint *pipelines);
	static GLboolean IsProgramPipeline(GLuint pipeline);
	static void GetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params);
	static void ProgramUniform1i(GLuint program, GLint location, GLint v0);
	static void ProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value);
	static void ProgramUniform1f(GLuint program, GLint location, GLfloat v0);
	static void ProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
	static void ProgramUniform1d(GLuint program, GLint location, GLdouble v0);
	static void ProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
	static void ProgramUniform1ui(GLuint program, GLint location, GLuint v0);
	static void ProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
	static void ProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1);
	static void ProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value);
	static void ProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1);
	static void ProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
	static void ProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1);
	static void ProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
	static void ProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1);
	static void ProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
	static void ProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
	static void ProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value);
	static void ProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	static void ProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
	static void ProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
	static void ProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
	static void ProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
	static void ProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
	static void ProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	static void ProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value);
	static void ProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	static void ProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
	static void ProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
	static void ProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
	static void ProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	static void ProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
	static void ProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	static void ProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	static void ProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	static void ProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	static void ProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	static void ProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	static void ProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	static void ProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	static void ProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	static void ProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	static void ProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	static void ProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	static void ProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	static void ProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	static void ProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	static void ProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	static void ProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	static void ProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	static void ValidateProgramPipeline(GLuint pipeline);
	static void GetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
	static void VertexAttribL1d(GLuint index, GLdouble x);
	static void VertexAttribL2d(GLuint index, GLdouble x, GLdouble y);
	static void VertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
	static void VertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	static void VertexAttribL1dv(GLuint index, const GLdouble *v);
	static void VertexAttribL2dv(GLuint index, const GLdouble *v);
	static void VertexAttribL3dv(GLuint index, const GLdouble *v);
	static void VertexAttribL4dv(GLuint index, const GLdouble *v);
	static void VertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
	static void GetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params);
	static void ViewportArrayv(GLuint first, GLsizei count, const GLfloat *v);
	static void ViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
	static void ViewportIndexedfv(GLuint index, const GLfloat *v);
	static void ScissorArrayv(GLuint first, GLsizei count, const GLint *v);
	static void ScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
	static void ScissorIndexedv(GLuint index, const GLint *v);
	static void DepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v);
	static void DepthRangeIndexed(GLuint index, GLdouble n, GLdouble f);
	static void GetFloati_v(GLenum target, GLuint index, GLfloat *data);
	static void GetDoublei_v(GLenum target, GLuint index, GLdouble *data);
	static GLsync CreateSyncFromCLeventARB(struct _cl_context * context, struct _cl_event * event, GLbitfield flags);
	static void DebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
	static void DebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
	static void DebugMessageCallbackARB(GLDEBUGPROCARB callback, const GLvoid *userParam);
	static GLuint GetDebugMessageLogARB(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
	static GLenum GetGraphicsResetStatusARB(void);
	static void GetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img);
	static void ReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data);
	static void GetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img);
	static void GetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
	static void GetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params);
	static void GetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
	static void GetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
	static void DrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
	static void DrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
	static void DrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
	static void DrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount);
	static void DrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
	static void GetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
	static void GetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
	static void BindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
	static void MemoryBarrier(GLbitfield barriers);
	static void TexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
	static void TexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
	static void TexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
	static void TextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
	static void TextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
	static void TextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
	static void DebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
	static void DebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
	static void DebugMessageCallback(GLDEBUGPROC callback, const void *userParam);
	static GLuint GetDebugMessageLog(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
	static void PushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message);
	static void PopDebugGroup(void);
	static void ObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
	static void GetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
	static void ObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label);
	static void GetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
	static void ClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
	static void ClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
	static void ClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
	static void ClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, GLsizeiptr offset, GLsizeiptr size, const void *data);
	static void DispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
	static void DispatchComputeIndirect(GLintptr indirect);
	static void CopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
	static void TextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
	static void BindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
	static void VertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
	static void VertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	static void VertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	static void VertexAttribBinding(GLuint attribindex, GLuint bindingindex);
	static void VertexBindingDivisor(GLuint bindingindex, GLuint divisor);
	static void VertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
	static void VertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
	static void VertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	static void VertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	static void VertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
	static void VertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor);
	static void FramebufferParameteri(GLenum target, GLenum pname, GLint param);
	static void GetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params);
	static void NamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param);
	static void GetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params);
	static void GetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
	static void InvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
	static void InvalidateTexImage(GLuint texture, GLint level);
	static void InvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length);
	static void InvalidateBufferData(GLuint buffer);
	static void InvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments);
	static void InvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
	static void MultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
	static void MultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
	static void GetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
	static GLuint GetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name);
	static void GetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
	static void GetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
	static GLint GetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name);
	static GLint GetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name);
	static void ShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
	static void TexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
	static void TextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
	static void TexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	static void TexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	static void TextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	static void TextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);


};
#endif
